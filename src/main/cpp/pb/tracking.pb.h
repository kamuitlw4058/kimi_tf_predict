// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tracking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tracking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tracking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tracking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tracking_2eproto;
namespace xn_adp {
namespace tracking {
class AdxBrokerLog;
class AdxBrokerLogDefaultTypeInternal;
extern AdxBrokerLogDefaultTypeInternal _AdxBrokerLog_default_instance_;
class BidInfo;
class BidInfoDefaultTypeInternal;
extern BidInfoDefaultTypeInternal _BidInfo_default_instance_;
class BidRequest;
class BidRequestDefaultTypeInternal;
extern BidRequestDefaultTypeInternal _BidRequest_default_instance_;
class BidResponse;
class BidResponseDefaultTypeInternal;
extern BidResponseDefaultTypeInternal _BidResponse_default_instance_;
class LocationInfo;
class LocationInfoDefaultTypeInternal;
extern LocationInfoDefaultTypeInternal _LocationInfo_default_instance_;
class ThirdBidInfo;
class ThirdBidInfoDefaultTypeInternal;
extern ThirdBidInfoDefaultTypeInternal _ThirdBidInfo_default_instance_;
class TrackingLog;
class TrackingLogDefaultTypeInternal;
extern TrackingLogDefaultTypeInternal _TrackingLog_default_instance_;
class XNBidInfo;
class XNBidInfoDefaultTypeInternal;
extern XNBidInfoDefaultTypeInternal _XNBidInfo_default_instance_;
}  // namespace tracking
}  // namespace xn_adp
PROTOBUF_NAMESPACE_OPEN
template<> ::xn_adp::tracking::AdxBrokerLog* Arena::CreateMaybeMessage<::xn_adp::tracking::AdxBrokerLog>(Arena*);
template<> ::xn_adp::tracking::BidInfo* Arena::CreateMaybeMessage<::xn_adp::tracking::BidInfo>(Arena*);
template<> ::xn_adp::tracking::BidRequest* Arena::CreateMaybeMessage<::xn_adp::tracking::BidRequest>(Arena*);
template<> ::xn_adp::tracking::BidResponse* Arena::CreateMaybeMessage<::xn_adp::tracking::BidResponse>(Arena*);
template<> ::xn_adp::tracking::LocationInfo* Arena::CreateMaybeMessage<::xn_adp::tracking::LocationInfo>(Arena*);
template<> ::xn_adp::tracking::ThirdBidInfo* Arena::CreateMaybeMessage<::xn_adp::tracking::ThirdBidInfo>(Arena*);
template<> ::xn_adp::tracking::TrackingLog* Arena::CreateMaybeMessage<::xn_adp::tracking::TrackingLog>(Arena*);
template<> ::xn_adp::tracking::XNBidInfo* Arena::CreateMaybeMessage<::xn_adp::tracking::XNBidInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xn_adp {
namespace tracking {

// ===================================================================

class XNBidInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.XNBidInfo) */ {
 public:
  XNBidInfo();
  virtual ~XNBidInfo();

  XNBidInfo(const XNBidInfo& from);
  XNBidInfo(XNBidInfo&& from) noexcept
    : XNBidInfo() {
    *this = ::std::move(from);
  }

  inline XNBidInfo& operator=(const XNBidInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline XNBidInfo& operator=(XNBidInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XNBidInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XNBidInfo* internal_default_instance() {
    return reinterpret_cast<const XNBidInfo*>(
               &_XNBidInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(XNBidInfo* other);
  friend void swap(XNBidInfo& a, XNBidInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XNBidInfo* New() const final {
    return CreateMaybeMessage<XNBidInfo>(nullptr);
  }

  XNBidInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XNBidInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XNBidInfo& from);
  void MergeFrom(const XNBidInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XNBidInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.XNBidInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string algo_tag = 10;
  void clear_algo_tag();
  static const int kAlgoTagFieldNumber = 10;
  const std::string& algo_tag() const;
  void set_algo_tag(const std::string& value);
  void set_algo_tag(std::string&& value);
  void set_algo_tag(const char* value);
  void set_algo_tag(const char* value, size_t size);
  std::string* mutable_algo_tag();
  std::string* release_algo_tag();
  void set_allocated_algo_tag(std::string* algo_tag);

  // int32 advid = 1;
  void clear_advid();
  static const int kAdvidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 advid() const;
  void set_advid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 campid = 2;
  void clear_campid();
  static const int kCampidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 campid() const;
  void set_campid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 planid = 3;
  void clear_planid();
  static const int kPlanidFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 planid() const;
  void set_planid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 crtid = 4;
  void clear_crtid();
  static const int kCrtidFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 crtid() const;
  void set_crtid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 bidtime = 5;
  void clear_bidtime();
  static const int kBidtimeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 bidtime() const;
  void set_bidtime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 bidtype = 6;
  void clear_bidtype();
  static const int kBidtypeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 bidtype() const;
  void set_bidtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 fctype = 7;
  void clear_fctype();
  static const int kFctypeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 fctype() const;
  void set_fctype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 pctr = 8;
  void clear_pctr();
  static const int kPctrFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 pctr() const;
  void set_pctr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 pcvr = 9;
  void clear_pcvr();
  static const int kPcvrFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 pcvr() const;
  void set_pcvr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.XNBidInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algo_tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 advid_;
  ::PROTOBUF_NAMESPACE_ID::int32 campid_;
  ::PROTOBUF_NAMESPACE_ID::int32 planid_;
  ::PROTOBUF_NAMESPACE_ID::int32 crtid_;
  ::PROTOBUF_NAMESPACE_ID::int64 bidtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 bidtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 fctype_;
  ::PROTOBUF_NAMESPACE_ID::int32 pctr_;
  ::PROTOBUF_NAMESPACE_ID::int32 pcvr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// -------------------------------------------------------------------

class ThirdBidInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.ThirdBidInfo) */ {
 public:
  ThirdBidInfo();
  virtual ~ThirdBidInfo();

  ThirdBidInfo(const ThirdBidInfo& from);
  ThirdBidInfo(ThirdBidInfo&& from) noexcept
    : ThirdBidInfo() {
    *this = ::std::move(from);
  }

  inline ThirdBidInfo& operator=(const ThirdBidInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThirdBidInfo& operator=(ThirdBidInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThirdBidInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThirdBidInfo* internal_default_instance() {
    return reinterpret_cast<const ThirdBidInfo*>(
               &_ThirdBidInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ThirdBidInfo* other);
  friend void swap(ThirdBidInfo& a, ThirdBidInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThirdBidInfo* New() const final {
    return CreateMaybeMessage<ThirdBidInfo>(nullptr);
  }

  ThirdBidInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThirdBidInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThirdBidInfo& from);
  void MergeFrom(const ThirdBidInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThirdBidInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.ThirdBidInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bid_id = 1;
  void clear_bid_id();
  static const int kBidIdFieldNumber = 1;
  const std::string& bid_id() const;
  void set_bid_id(const std::string& value);
  void set_bid_id(std::string&& value);
  void set_bid_id(const char* value);
  void set_bid_id(const char* value, size_t size);
  std::string* mutable_bid_id();
  std::string* release_bid_id();
  void set_allocated_bid_id(std::string* bid_id);

  // string camp_id = 2;
  void clear_camp_id();
  static const int kCampIdFieldNumber = 2;
  const std::string& camp_id() const;
  void set_camp_id(const std::string& value);
  void set_camp_id(std::string&& value);
  void set_camp_id(const char* value);
  void set_camp_id(const char* value, size_t size);
  std::string* mutable_camp_id();
  std::string* release_camp_id();
  void set_allocated_camp_id(std::string* camp_id);

  // string ad_id = 3;
  void clear_ad_id();
  static const int kAdIdFieldNumber = 3;
  const std::string& ad_id() const;
  void set_ad_id(const std::string& value);
  void set_ad_id(std::string&& value);
  void set_ad_id(const char* value);
  void set_ad_id(const char* value, size_t size);
  std::string* mutable_ad_id();
  std::string* release_ad_id();
  void set_allocated_ad_id(std::string* ad_id);

  // string crt_id = 4;
  void clear_crt_id();
  static const int kCrtIdFieldNumber = 4;
  const std::string& crt_id() const;
  void set_crt_id(const std::string& value);
  void set_crt_id(std::string&& value);
  void set_crt_id(const char* value);
  void set_crt_id(const char* value, size_t size);
  std::string* mutable_crt_id();
  std::string* release_crt_id();
  void set_allocated_crt_id(std::string* crt_id);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.ThirdBidInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bid_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ad_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crt_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// -------------------------------------------------------------------

class LocationInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.LocationInfo) */ {
 public:
  LocationInfo();
  virtual ~LocationInfo();

  LocationInfo(const LocationInfo& from);
  LocationInfo(LocationInfo&& from) noexcept
    : LocationInfo() {
    *this = ::std::move(from);
  }

  inline LocationInfo& operator=(const LocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationInfo& operator=(LocationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationInfo* internal_default_instance() {
    return reinterpret_cast<const LocationInfo*>(
               &_LocationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LocationInfo* other);
  friend void swap(LocationInfo& a, LocationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationInfo* New() const final {
    return CreateMaybeMessage<LocationInfo>(nullptr);
  }

  LocationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationInfo& from);
  void MergeFrom(const LocationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.LocationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string province = 1;
  void clear_province();
  static const int kProvinceFieldNumber = 1;
  const std::string& province() const;
  void set_province(const std::string& value);
  void set_province(std::string&& value);
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  std::string* mutable_province();
  std::string* release_province();
  void set_allocated_province(std::string* province);

  // string city = 2;
  void clear_city();
  static const int kCityFieldNumber = 2;
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);

  // string district = 3;
  void clear_district();
  static const int kDistrictFieldNumber = 3;
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);

  // string street = 4;
  void clear_street();
  static const int kStreetFieldNumber = 4;
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);

  // string street_number = 5;
  void clear_street_number();
  static const int kStreetNumberFieldNumber = 5;
  const std::string& street_number() const;
  void set_street_number(const std::string& value);
  void set_street_number(std::string&& value);
  void set_street_number(const char* value);
  void set_street_number(const char* value, size_t size);
  std::string* mutable_street_number();
  std::string* release_street_number();
  void set_allocated_street_number(std::string* street_number);

  // string address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string poi_name = 7;
  void clear_poi_name();
  static const int kPoiNameFieldNumber = 7;
  const std::string& poi_name() const;
  void set_poi_name(const std::string& value);
  void set_poi_name(std::string&& value);
  void set_poi_name(const char* value);
  void set_poi_name(const char* value, size_t size);
  std::string* mutable_poi_name();
  std::string* release_poi_name();
  void set_allocated_poi_name(std::string* poi_name);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.LocationInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poi_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// -------------------------------------------------------------------

class BidRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.BidRequest) */ {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);
  BidRequest(BidRequest&& from) noexcept
    : BidRequest() {
    *this = ::std::move(from);
  }

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BidRequest& operator=(BidRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BidRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BidRequest* internal_default_instance() {
    return reinterpret_cast<const BidRequest*>(
               &_BidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BidRequest* other);
  friend void swap(BidRequest& a, BidRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BidRequest* New() const final {
    return CreateMaybeMessage<BidRequest>(nullptr);
  }

  BidRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BidRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BidRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.BidRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sdkv = 10;
  void clear_sdkv();
  static const int kSdkvFieldNumber = 10;
  const std::string& sdkv() const;
  void set_sdkv(const std::string& value);
  void set_sdkv(std::string&& value);
  void set_sdkv(const char* value);
  void set_sdkv(const char* value, size_t size);
  std::string* mutable_sdkv();
  std::string* release_sdkv();
  void set_allocated_sdkv(std::string* sdkv);

  // string osv = 12;
  void clear_osv();
  static const int kOsvFieldNumber = 12;
  const std::string& osv() const;
  void set_osv(const std::string& value);
  void set_osv(std::string&& value);
  void set_osv(const char* value);
  void set_osv(const char* value, size_t size);
  std::string* mutable_osv();
  std::string* release_osv();
  void set_allocated_osv(std::string* osv);

  // string brand = 13;
  void clear_brand();
  static const int kBrandFieldNumber = 13;
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);

  // string model = 14;
  void clear_model();
  static const int kModelFieldNumber = 14;
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);

  // string operator = 17;
  void clear_operator_();
  static const int kOperatorFieldNumber = 17;
  const std::string& operator_() const;
  void set_operator_(const std::string& value);
  void set_operator_(std::string&& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  std::string* mutable_operator_();
  std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);

  // string imei = 18;
  void clear_imei();
  static const int kImeiFieldNumber = 18;
  const std::string& imei() const;
  void set_imei(const std::string& value);
  void set_imei(std::string&& value);
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  std::string* mutable_imei();
  std::string* release_imei();
  void set_allocated_imei(std::string* imei);

  // string oaid = 19;
  void clear_oaid();
  static const int kOaidFieldNumber = 19;
  const std::string& oaid() const;
  void set_oaid(const std::string& value);
  void set_oaid(std::string&& value);
  void set_oaid(const char* value);
  void set_oaid(const char* value, size_t size);
  std::string* mutable_oaid();
  std::string* release_oaid();
  void set_allocated_oaid(std::string* oaid);

  // string android_id = 20;
  void clear_android_id();
  static const int kAndroidIdFieldNumber = 20;
  const std::string& android_id() const;
  void set_android_id(const std::string& value);
  void set_android_id(std::string&& value);
  void set_android_id(const char* value);
  void set_android_id(const char* value, size_t size);
  std::string* mutable_android_id();
  std::string* release_android_id();
  void set_allocated_android_id(std::string* android_id);

  // string idfa = 21;
  void clear_idfa();
  static const int kIdfaFieldNumber = 21;
  const std::string& idfa() const;
  void set_idfa(const std::string& value);
  void set_idfa(std::string&& value);
  void set_idfa(const char* value);
  void set_idfa(const char* value, size_t size);
  std::string* mutable_idfa();
  std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);

  // string idfv = 22;
  void clear_idfv();
  static const int kIdfvFieldNumber = 22;
  const std::string& idfv() const;
  void set_idfv(const std::string& value);
  void set_idfv(std::string&& value);
  void set_idfv(const char* value);
  void set_idfv(const char* value, size_t size);
  std::string* mutable_idfv();
  std::string* release_idfv();
  void set_allocated_idfv(std::string* idfv);

  // string ip = 23;
  void clear_ip();
  static const int kIpFieldNumber = 23;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string app_ver = 27;
  void clear_app_ver();
  static const int kAppVerFieldNumber = 27;
  const std::string& app_ver() const;
  void set_app_ver(const std::string& value);
  void set_app_ver(std::string&& value);
  void set_app_ver(const char* value);
  void set_app_ver(const char* value, size_t size);
  std::string* mutable_app_ver();
  std::string* release_app_ver();
  void set_allocated_app_ver(std::string* app_ver);

  // .xn_adp.tracking.LocationInfo location = 36;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 36;
  const ::xn_adp::tracking::LocationInfo& location() const;
  ::xn_adp::tracking::LocationInfo* release_location();
  ::xn_adp::tracking::LocationInfo* mutable_location();
  void set_allocated_location(::xn_adp::tracking::LocationInfo* location);

  // int64 req_id = 1;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 req_time = 2;
  void clear_req_time();
  static const int kReqTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 req_time() const;
  void set_req_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 pub_id = 3;
  void clear_pub_id();
  static const int kPubIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 pub_id() const;
  void set_pub_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 app_id = 4;
  void clear_app_id();
  static const int kAppIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 placement_id = 5;
  void clear_placement_id();
  static const int kPlacementIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 placement_id() const;
  void set_placement_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 imp_type = 6;
  void clear_imp_type();
  static const int kImpTypeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 imp_type() const;
  void set_imp_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 w = 7;
  void clear_w();
  static const int kWFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 h = 8;
  void clear_h();
  static const int kHFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 os = 11;
  void clear_os();
  static const int kOsFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 os() const;
  void set_os(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 conn = 15;
  void clear_conn();
  static const int kConnFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 conn() const;
  void set_conn(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 devtype = 16;
  void clear_devtype();
  static const int kDevtypeFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 devtype() const;
  void set_devtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float lat = 24;
  void clear_lat();
  static const int kLatFieldNumber = 24;
  float lat() const;
  void set_lat(float value);

  // float lon = 25;
  void clear_lon();
  static const int kLonFieldNumber = 25;
  float lon() const;
  void set_lon(float value);

  // int32 carrier = 26;
  void clear_carrier();
  static const int kCarrierFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int32 carrier() const;
  void set_carrier(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 orientation = 28;
  void clear_orientation();
  static const int kOrientationFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ppi = 29;
  void clear_ppi();
  static const int kPpiFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int32 ppi() const;
  void set_ppi(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.BidRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdkv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oaid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr android_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_ver_;
  ::xn_adp::tracking::LocationInfo* location_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 pub_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 placement_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 imp_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_;
  ::PROTOBUF_NAMESPACE_ID::int32 devtype_;
  float lat_;
  float lon_;
  ::PROTOBUF_NAMESPACE_ID::int32 carrier_;
  ::PROTOBUF_NAMESPACE_ID::int32 orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 ppi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// -------------------------------------------------------------------

class BidResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.BidResponse) */ {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);
  BidResponse(BidResponse&& from) noexcept
    : BidResponse() {
    *this = ::std::move(from);
  }

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BidResponse& operator=(BidResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BidResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BidResponse* internal_default_instance() {
    return reinterpret_cast<const BidResponse*>(
               &_BidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BidResponse* other);
  friend void swap(BidResponse& a, BidResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BidResponse* New() const final {
    return CreateMaybeMessage<BidResponse>(nullptr);
  }

  BidResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BidResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BidResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.BidResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string crt_size = 4;
  void clear_crt_size();
  static const int kCrtSizeFieldNumber = 4;
  const std::string& crt_size() const;
  void set_crt_size(const std::string& value);
  void set_crt_size(std::string&& value);
  void set_crt_size(const char* value);
  void set_crt_size(const char* value, size_t size);
  std::string* mutable_crt_size();
  std::string* release_crt_size();
  void set_allocated_crt_size(std::string* crt_size);

  // string ad_pkg = 5;
  void clear_ad_pkg();
  static const int kAdPkgFieldNumber = 5;
  const std::string& ad_pkg() const;
  void set_ad_pkg(const std::string& value);
  void set_ad_pkg(std::string&& value);
  void set_ad_pkg(const char* value);
  void set_ad_pkg(const char* value, size_t size);
  std::string* mutable_ad_pkg();
  std::string* release_ad_pkg();
  void set_allocated_ad_pkg(std::string* ad_pkg);

  // .xn_adp.tracking.XNBidInfo xn_bi = 6;
  bool has_xn_bi() const;
  void clear_xn_bi();
  static const int kXnBiFieldNumber = 6;
  const ::xn_adp::tracking::XNBidInfo& xn_bi() const;
  ::xn_adp::tracking::XNBidInfo* release_xn_bi();
  ::xn_adp::tracking::XNBidInfo* mutable_xn_bi();
  void set_allocated_xn_bi(::xn_adp::tracking::XNBidInfo* xn_bi);

  // .xn_adp.tracking.ThirdBidInfo third_bi = 7;
  bool has_third_bi() const;
  void clear_third_bi();
  static const int kThirdBiFieldNumber = 7;
  const ::xn_adp::tracking::ThirdBidInfo& third_bi() const;
  ::xn_adp::tracking::ThirdBidInfo* release_third_bi();
  ::xn_adp::tracking::ThirdBidInfo* mutable_third_bi();
  void set_allocated_third_bi(::xn_adp::tracking::ThirdBidInfo* third_bi);

  // int32 dsp = 1;
  void clear_dsp();
  static const int kDspFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 dsp() const;
  void set_dsp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 action_type = 3;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 action_type() const;
  void set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.BidResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crt_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ad_pkg_;
  ::xn_adp::tracking::XNBidInfo* xn_bi_;
  ::xn_adp::tracking::ThirdBidInfo* third_bi_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsp_;
  ::PROTOBUF_NAMESPACE_ID::int32 price_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// -------------------------------------------------------------------

class BidInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.BidInfo) */ {
 public:
  BidInfo();
  virtual ~BidInfo();

  BidInfo(const BidInfo& from);
  BidInfo(BidInfo&& from) noexcept
    : BidInfo() {
    *this = ::std::move(from);
  }

  inline BidInfo& operator=(const BidInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BidInfo& operator=(BidInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BidInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BidInfo* internal_default_instance() {
    return reinterpret_cast<const BidInfo*>(
               &_BidInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BidInfo* other);
  friend void swap(BidInfo& a, BidInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BidInfo* New() const final {
    return CreateMaybeMessage<BidInfo>(nullptr);
  }

  BidInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BidInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BidInfo& from);
  void MergeFrom(const BidInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BidInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.BidInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // .xn_adp.tracking.BidRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  const ::xn_adp::tracking::BidRequest& req() const;
  ::xn_adp::tracking::BidRequest* release_req();
  ::xn_adp::tracking::BidRequest* mutable_req();
  void set_allocated_req(::xn_adp::tracking::BidRequest* req);

  // .xn_adp.tracking.BidResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::xn_adp::tracking::BidResponse& resp() const;
  ::xn_adp::tracking::BidResponse* release_resp();
  ::xn_adp::tracking::BidResponse* mutable_resp();
  void set_allocated_resp(::xn_adp::tracking::BidResponse* resp);

  // int32 win_price = 4;
  void clear_win_price();
  static const int kWinPriceFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 win_price() const;
  void set_win_price(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.BidInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::xn_adp::tracking::BidRequest* req_;
  ::xn_adp::tracking::BidResponse* resp_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// -------------------------------------------------------------------

class TrackingLog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.TrackingLog) */ {
 public:
  TrackingLog();
  virtual ~TrackingLog();

  TrackingLog(const TrackingLog& from);
  TrackingLog(TrackingLog&& from) noexcept
    : TrackingLog() {
    *this = ::std::move(from);
  }

  inline TrackingLog& operator=(const TrackingLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackingLog& operator=(TrackingLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackingLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingLog* internal_default_instance() {
    return reinterpret_cast<const TrackingLog*>(
               &_TrackingLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TrackingLog* other);
  friend void swap(TrackingLog& a, TrackingLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackingLog* New() const final {
    return CreateMaybeMessage<TrackingLog>(nullptr);
  }

  TrackingLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackingLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackingLog& from);
  void MergeFrom(const TrackingLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.TrackingLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_extra_info = 4;
  void clear_event_extra_info();
  static const int kEventExtraInfoFieldNumber = 4;
  const std::string& event_extra_info() const;
  void set_event_extra_info(const std::string& value);
  void set_event_extra_info(std::string&& value);
  void set_event_extra_info(const char* value);
  void set_event_extra_info(const char* value, size_t size);
  std::string* mutable_event_extra_info();
  std::string* release_event_extra_info();
  void set_allocated_event_extra_info(std::string* event_extra_info);

  // .xn_adp.tracking.BidInfo bid_info = 1;
  bool has_bid_info() const;
  void clear_bid_info();
  static const int kBidInfoFieldNumber = 1;
  const ::xn_adp::tracking::BidInfo& bid_info() const;
  ::xn_adp::tracking::BidInfo* release_bid_info();
  ::xn_adp::tracking::BidInfo* mutable_bid_info();
  void set_allocated_bid_info(::xn_adp::tracking::BidInfo* bid_info);

  // int64 event_time = 2;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 event_time() const;
  void set_event_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 client_event_time = 5;
  void clear_client_event_time();
  static const int kClientEventTimeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 client_event_time() const;
  void set_client_event_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 event_code = 3;
  void clear_event_code();
  static const int kEventCodeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 event_code() const;
  void set_event_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 conv_event_code = 7;
  void clear_conv_event_code();
  static const int kConvEventCodeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 conv_event_code() const;
  void set_conv_event_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 client_fill_time = 6;
  void clear_client_fill_time();
  static const int kClientFillTimeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 client_fill_time() const;
  void set_client_fill_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.TrackingLog)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_extra_info_;
  ::xn_adp::tracking::BidInfo* bid_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_event_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 conv_event_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_fill_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// -------------------------------------------------------------------

class AdxBrokerLog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xn_adp.tracking.AdxBrokerLog) */ {
 public:
  AdxBrokerLog();
  virtual ~AdxBrokerLog();

  AdxBrokerLog(const AdxBrokerLog& from);
  AdxBrokerLog(AdxBrokerLog&& from) noexcept
    : AdxBrokerLog() {
    *this = ::std::move(from);
  }

  inline AdxBrokerLog& operator=(const AdxBrokerLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdxBrokerLog& operator=(AdxBrokerLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdxBrokerLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdxBrokerLog* internal_default_instance() {
    return reinterpret_cast<const AdxBrokerLog*>(
               &_AdxBrokerLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AdxBrokerLog* other);
  friend void swap(AdxBrokerLog& a, AdxBrokerLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdxBrokerLog* New() const final {
    return CreateMaybeMessage<AdxBrokerLog>(nullptr);
  }

  AdxBrokerLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdxBrokerLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdxBrokerLog& from);
  void MergeFrom(const AdxBrokerLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdxBrokerLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xn_adp.tracking.AdxBrokerLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tracking_2eproto);
    return ::descriptor_table_tracking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // string dsp_nbr = 5;
  void clear_dsp_nbr();
  static const int kDspNbrFieldNumber = 5;
  const std::string& dsp_nbr() const;
  void set_dsp_nbr(const std::string& value);
  void set_dsp_nbr(std::string&& value);
  void set_dsp_nbr(const char* value);
  void set_dsp_nbr(const char* value, size_t size);
  std::string* mutable_dsp_nbr();
  std::string* release_dsp_nbr();
  void set_allocated_dsp_nbr(std::string* dsp_nbr);

  // .xn_adp.tracking.BidRequest req = 1;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 1;
  const ::xn_adp::tracking::BidRequest& req() const;
  ::xn_adp::tracking::BidRequest* release_req();
  ::xn_adp::tracking::BidRequest* mutable_req();
  void set_allocated_req(::xn_adp::tracking::BidRequest* req);

  // .xn_adp.tracking.BidResponse resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::xn_adp::tracking::BidResponse& resp() const;
  ::xn_adp::tracking::BidResponse* release_resp();
  ::xn_adp::tracking::BidResponse* mutable_resp();
  void set_allocated_resp(::xn_adp::tracking::BidResponse* resp);

  // int32 dsp = 4;
  void clear_dsp();
  static const int kDspFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 dsp() const;
  void set_dsp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xn_adp.tracking.AdxBrokerLog)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dsp_nbr_;
  ::xn_adp::tracking::BidRequest* req_;
  ::xn_adp::tracking::BidResponse* resp_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tracking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XNBidInfo

// int32 advid = 1;
inline void XNBidInfo::clear_advid() {
  advid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::advid() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.advid)
  return advid_;
}
inline void XNBidInfo::set_advid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  advid_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.advid)
}

// int32 campid = 2;
inline void XNBidInfo::clear_campid() {
  campid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::campid() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.campid)
  return campid_;
}
inline void XNBidInfo::set_campid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.campid)
}

// int32 planid = 3;
inline void XNBidInfo::clear_planid() {
  planid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::planid() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.planid)
  return planid_;
}
inline void XNBidInfo::set_planid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planid_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.planid)
}

// int32 crtid = 4;
inline void XNBidInfo::clear_crtid() {
  crtid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::crtid() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.crtid)
  return crtid_;
}
inline void XNBidInfo::set_crtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  crtid_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.crtid)
}

// int64 bidtime = 5;
inline void XNBidInfo::clear_bidtime() {
  bidtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 XNBidInfo::bidtime() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.bidtime)
  return bidtime_;
}
inline void XNBidInfo::set_bidtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bidtime_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.bidtime)
}

// int32 bidtype = 6;
inline void XNBidInfo::clear_bidtype() {
  bidtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::bidtype() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.bidtype)
  return bidtype_;
}
inline void XNBidInfo::set_bidtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bidtype_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.bidtype)
}

// int32 fctype = 7;
inline void XNBidInfo::clear_fctype() {
  fctype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::fctype() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.fctype)
  return fctype_;
}
inline void XNBidInfo::set_fctype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fctype_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.fctype)
}

// int32 pctr = 8;
inline void XNBidInfo::clear_pctr() {
  pctr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::pctr() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.pctr)
  return pctr_;
}
inline void XNBidInfo::set_pctr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pctr_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.pctr)
}

// int32 pcvr = 9;
inline void XNBidInfo::clear_pcvr() {
  pcvr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XNBidInfo::pcvr() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.pcvr)
  return pcvr_;
}
inline void XNBidInfo::set_pcvr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pcvr_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.pcvr)
}

// string algo_tag = 10;
inline void XNBidInfo::clear_algo_tag() {
  algo_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XNBidInfo::algo_tag() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.XNBidInfo.algo_tag)
  return algo_tag_.GetNoArena();
}
inline void XNBidInfo::set_algo_tag(const std::string& value) {
  
  algo_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.XNBidInfo.algo_tag)
}
inline void XNBidInfo::set_algo_tag(std::string&& value) {
  
  algo_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.XNBidInfo.algo_tag)
}
inline void XNBidInfo::set_algo_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algo_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.XNBidInfo.algo_tag)
}
inline void XNBidInfo::set_algo_tag(const char* value, size_t size) {
  
  algo_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.XNBidInfo.algo_tag)
}
inline std::string* XNBidInfo::mutable_algo_tag() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.XNBidInfo.algo_tag)
  return algo_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XNBidInfo::release_algo_tag() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.XNBidInfo.algo_tag)
  
  return algo_tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XNBidInfo::set_allocated_algo_tag(std::string* algo_tag) {
  if (algo_tag != nullptr) {
    
  } else {
    
  }
  algo_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algo_tag);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.XNBidInfo.algo_tag)
}

// -------------------------------------------------------------------

// ThirdBidInfo

// string bid_id = 1;
inline void ThirdBidInfo::clear_bid_id() {
  bid_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThirdBidInfo::bid_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.ThirdBidInfo.bid_id)
  return bid_id_.GetNoArena();
}
inline void ThirdBidInfo::set_bid_id(const std::string& value) {
  
  bid_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.ThirdBidInfo.bid_id)
}
inline void ThirdBidInfo::set_bid_id(std::string&& value) {
  
  bid_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.ThirdBidInfo.bid_id)
}
inline void ThirdBidInfo::set_bid_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bid_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.ThirdBidInfo.bid_id)
}
inline void ThirdBidInfo::set_bid_id(const char* value, size_t size) {
  
  bid_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.ThirdBidInfo.bid_id)
}
inline std::string* ThirdBidInfo::mutable_bid_id() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.ThirdBidInfo.bid_id)
  return bid_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThirdBidInfo::release_bid_id() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.ThirdBidInfo.bid_id)
  
  return bid_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdBidInfo::set_allocated_bid_id(std::string* bid_id) {
  if (bid_id != nullptr) {
    
  } else {
    
  }
  bid_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bid_id);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.ThirdBidInfo.bid_id)
}

// string camp_id = 2;
inline void ThirdBidInfo::clear_camp_id() {
  camp_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThirdBidInfo::camp_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.ThirdBidInfo.camp_id)
  return camp_id_.GetNoArena();
}
inline void ThirdBidInfo::set_camp_id(const std::string& value) {
  
  camp_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.ThirdBidInfo.camp_id)
}
inline void ThirdBidInfo::set_camp_id(std::string&& value) {
  
  camp_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.ThirdBidInfo.camp_id)
}
inline void ThirdBidInfo::set_camp_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camp_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.ThirdBidInfo.camp_id)
}
inline void ThirdBidInfo::set_camp_id(const char* value, size_t size) {
  
  camp_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.ThirdBidInfo.camp_id)
}
inline std::string* ThirdBidInfo::mutable_camp_id() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.ThirdBidInfo.camp_id)
  return camp_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThirdBidInfo::release_camp_id() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.ThirdBidInfo.camp_id)
  
  return camp_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdBidInfo::set_allocated_camp_id(std::string* camp_id) {
  if (camp_id != nullptr) {
    
  } else {
    
  }
  camp_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camp_id);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.ThirdBidInfo.camp_id)
}

// string ad_id = 3;
inline void ThirdBidInfo::clear_ad_id() {
  ad_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThirdBidInfo::ad_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.ThirdBidInfo.ad_id)
  return ad_id_.GetNoArena();
}
inline void ThirdBidInfo::set_ad_id(const std::string& value) {
  
  ad_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.ThirdBidInfo.ad_id)
}
inline void ThirdBidInfo::set_ad_id(std::string&& value) {
  
  ad_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.ThirdBidInfo.ad_id)
}
inline void ThirdBidInfo::set_ad_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ad_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.ThirdBidInfo.ad_id)
}
inline void ThirdBidInfo::set_ad_id(const char* value, size_t size) {
  
  ad_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.ThirdBidInfo.ad_id)
}
inline std::string* ThirdBidInfo::mutable_ad_id() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.ThirdBidInfo.ad_id)
  return ad_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThirdBidInfo::release_ad_id() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.ThirdBidInfo.ad_id)
  
  return ad_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdBidInfo::set_allocated_ad_id(std::string* ad_id) {
  if (ad_id != nullptr) {
    
  } else {
    
  }
  ad_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ad_id);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.ThirdBidInfo.ad_id)
}

// string crt_id = 4;
inline void ThirdBidInfo::clear_crt_id() {
  crt_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThirdBidInfo::crt_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.ThirdBidInfo.crt_id)
  return crt_id_.GetNoArena();
}
inline void ThirdBidInfo::set_crt_id(const std::string& value) {
  
  crt_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.ThirdBidInfo.crt_id)
}
inline void ThirdBidInfo::set_crt_id(std::string&& value) {
  
  crt_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.ThirdBidInfo.crt_id)
}
inline void ThirdBidInfo::set_crt_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crt_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.ThirdBidInfo.crt_id)
}
inline void ThirdBidInfo::set_crt_id(const char* value, size_t size) {
  
  crt_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.ThirdBidInfo.crt_id)
}
inline std::string* ThirdBidInfo::mutable_crt_id() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.ThirdBidInfo.crt_id)
  return crt_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThirdBidInfo::release_crt_id() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.ThirdBidInfo.crt_id)
  
  return crt_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdBidInfo::set_allocated_crt_id(std::string* crt_id) {
  if (crt_id != nullptr) {
    
  } else {
    
  }
  crt_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crt_id);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.ThirdBidInfo.crt_id)
}

// -------------------------------------------------------------------

// LocationInfo

// string province = 1;
inline void LocationInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationInfo::province() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.LocationInfo.province)
  return province_.GetNoArena();
}
inline void LocationInfo::set_province(const std::string& value) {
  
  province_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.LocationInfo.province)
}
inline void LocationInfo::set_province(std::string&& value) {
  
  province_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.LocationInfo.province)
}
inline void LocationInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  province_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.LocationInfo.province)
}
inline void LocationInfo::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.LocationInfo.province)
}
inline std::string* LocationInfo::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.LocationInfo.province)
  return province_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationInfo::release_province() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.LocationInfo.province)
  
  return province_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_province(std::string* province) {
  if (province != nullptr) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.LocationInfo.province)
}

// string city = 2;
inline void LocationInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationInfo::city() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.LocationInfo.city)
  return city_.GetNoArena();
}
inline void LocationInfo::set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.LocationInfo.city)
}
inline void LocationInfo::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.LocationInfo.city)
}
inline void LocationInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.LocationInfo.city)
}
inline void LocationInfo::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.LocationInfo.city)
}
inline std::string* LocationInfo::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.LocationInfo.city)
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationInfo::release_city() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.LocationInfo.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.LocationInfo.city)
}

// string district = 3;
inline void LocationInfo::clear_district() {
  district_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationInfo::district() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.LocationInfo.district)
  return district_.GetNoArena();
}
inline void LocationInfo::set_district(const std::string& value) {
  
  district_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.LocationInfo.district)
}
inline void LocationInfo::set_district(std::string&& value) {
  
  district_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.LocationInfo.district)
}
inline void LocationInfo::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.LocationInfo.district)
}
inline void LocationInfo::set_district(const char* value, size_t size) {
  
  district_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.LocationInfo.district)
}
inline std::string* LocationInfo::mutable_district() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.LocationInfo.district)
  return district_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationInfo::release_district() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.LocationInfo.district)
  
  return district_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.LocationInfo.district)
}

// string street = 4;
inline void LocationInfo::clear_street() {
  street_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationInfo::street() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.LocationInfo.street)
  return street_.GetNoArena();
}
inline void LocationInfo::set_street(const std::string& value) {
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.LocationInfo.street)
}
inline void LocationInfo::set_street(std::string&& value) {
  
  street_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.LocationInfo.street)
}
inline void LocationInfo::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.LocationInfo.street)
}
inline void LocationInfo::set_street(const char* value, size_t size) {
  
  street_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.LocationInfo.street)
}
inline std::string* LocationInfo::mutable_street() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.LocationInfo.street)
  return street_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationInfo::release_street() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.LocationInfo.street)
  
  return street_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.LocationInfo.street)
}

// string street_number = 5;
inline void LocationInfo::clear_street_number() {
  street_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationInfo::street_number() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.LocationInfo.street_number)
  return street_number_.GetNoArena();
}
inline void LocationInfo::set_street_number(const std::string& value) {
  
  street_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.LocationInfo.street_number)
}
inline void LocationInfo::set_street_number(std::string&& value) {
  
  street_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.LocationInfo.street_number)
}
inline void LocationInfo::set_street_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.LocationInfo.street_number)
}
inline void LocationInfo::set_street_number(const char* value, size_t size) {
  
  street_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.LocationInfo.street_number)
}
inline std::string* LocationInfo::mutable_street_number() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.LocationInfo.street_number)
  return street_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationInfo::release_street_number() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.LocationInfo.street_number)
  
  return street_number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_street_number(std::string* street_number) {
  if (street_number != nullptr) {
    
  } else {
    
  }
  street_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street_number);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.LocationInfo.street_number)
}

// string address = 6;
inline void LocationInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationInfo::address() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.LocationInfo.address)
  return address_.GetNoArena();
}
inline void LocationInfo::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.LocationInfo.address)
}
inline void LocationInfo::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.LocationInfo.address)
}
inline void LocationInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.LocationInfo.address)
}
inline void LocationInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.LocationInfo.address)
}
inline std::string* LocationInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.LocationInfo.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationInfo::release_address() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.LocationInfo.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.LocationInfo.address)
}

// string poi_name = 7;
inline void LocationInfo::clear_poi_name() {
  poi_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LocationInfo::poi_name() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.LocationInfo.poi_name)
  return poi_name_.GetNoArena();
}
inline void LocationInfo::set_poi_name(const std::string& value) {
  
  poi_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.LocationInfo.poi_name)
}
inline void LocationInfo::set_poi_name(std::string&& value) {
  
  poi_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.LocationInfo.poi_name)
}
inline void LocationInfo::set_poi_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poi_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.LocationInfo.poi_name)
}
inline void LocationInfo::set_poi_name(const char* value, size_t size) {
  
  poi_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.LocationInfo.poi_name)
}
inline std::string* LocationInfo::mutable_poi_name() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.LocationInfo.poi_name)
  return poi_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LocationInfo::release_poi_name() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.LocationInfo.poi_name)
  
  return poi_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_poi_name(std::string* poi_name) {
  if (poi_name != nullptr) {
    
  } else {
    
  }
  poi_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poi_name);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.LocationInfo.poi_name)
}

// -------------------------------------------------------------------

// BidRequest

// int64 req_id = 1;
inline void BidRequest::clear_req_id() {
  req_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BidRequest::req_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.req_id)
  return req_id_;
}
inline void BidRequest::set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.req_id)
}

// int64 req_time = 2;
inline void BidRequest::clear_req_time() {
  req_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BidRequest::req_time() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.req_time)
  return req_time_;
}
inline void BidRequest::set_req_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_time_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.req_time)
}

// int32 pub_id = 3;
inline void BidRequest::clear_pub_id() {
  pub_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::pub_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.pub_id)
  return pub_id_;
}
inline void BidRequest::set_pub_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pub_id_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.pub_id)
}

// int32 app_id = 4;
inline void BidRequest::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::app_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.app_id)
  return app_id_;
}
inline void BidRequest::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.app_id)
}

// int32 placement_id = 5;
inline void BidRequest::clear_placement_id() {
  placement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::placement_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.placement_id)
  return placement_id_;
}
inline void BidRequest::set_placement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  placement_id_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.placement_id)
}

// int32 imp_type = 6;
inline void BidRequest::clear_imp_type() {
  imp_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::imp_type() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.imp_type)
  return imp_type_;
}
inline void BidRequest::set_imp_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  imp_type_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.imp_type)
}

// int32 w = 7;
inline void BidRequest::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::w() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.w)
  return w_;
}
inline void BidRequest::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.w)
}

// int32 h = 8;
inline void BidRequest::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::h() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.h)
  return h_;
}
inline void BidRequest::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.h)
}

// string sdkv = 10;
inline void BidRequest::clear_sdkv() {
  sdkv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::sdkv() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.sdkv)
  return sdkv_.GetNoArena();
}
inline void BidRequest::set_sdkv(const std::string& value) {
  
  sdkv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.sdkv)
}
inline void BidRequest::set_sdkv(std::string&& value) {
  
  sdkv_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.sdkv)
}
inline void BidRequest::set_sdkv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdkv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.sdkv)
}
inline void BidRequest::set_sdkv(const char* value, size_t size) {
  
  sdkv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.sdkv)
}
inline std::string* BidRequest::mutable_sdkv() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.sdkv)
  return sdkv_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_sdkv() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.sdkv)
  
  return sdkv_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_sdkv(std::string* sdkv) {
  if (sdkv != nullptr) {
    
  } else {
    
  }
  sdkv_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdkv);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.sdkv)
}

// int32 os = 11;
inline void BidRequest::clear_os() {
  os_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::os() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.os)
  return os_;
}
inline void BidRequest::set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.os)
}

// string osv = 12;
inline void BidRequest::clear_osv() {
  osv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::osv() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.osv)
  return osv_.GetNoArena();
}
inline void BidRequest::set_osv(const std::string& value) {
  
  osv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.osv)
}
inline void BidRequest::set_osv(std::string&& value) {
  
  osv_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.osv)
}
inline void BidRequest::set_osv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.osv)
}
inline void BidRequest::set_osv(const char* value, size_t size) {
  
  osv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.osv)
}
inline std::string* BidRequest::mutable_osv() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.osv)
  return osv_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_osv() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.osv)
  
  return osv_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_osv(std::string* osv) {
  if (osv != nullptr) {
    
  } else {
    
  }
  osv_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osv);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.osv)
}

// string brand = 13;
inline void BidRequest::clear_brand() {
  brand_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::brand() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.brand)
  return brand_.GetNoArena();
}
inline void BidRequest::set_brand(const std::string& value) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.brand)
}
inline void BidRequest::set_brand(std::string&& value) {
  
  brand_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.brand)
}
inline void BidRequest::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.brand)
}
inline void BidRequest::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.brand)
}
inline std::string* BidRequest::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.brand)
  return brand_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_brand() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.brand)
  
  return brand_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.brand)
}

// string model = 14;
inline void BidRequest::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::model() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.model)
  return model_.GetNoArena();
}
inline void BidRequest::set_model(const std::string& value) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.model)
}
inline void BidRequest::set_model(std::string&& value) {
  
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.model)
}
inline void BidRequest::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.model)
}
inline void BidRequest::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.model)
}
inline std::string* BidRequest::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.model)
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_model() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.model)
  
  return model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.model)
}

// int32 conn = 15;
inline void BidRequest::clear_conn() {
  conn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::conn() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.conn)
  return conn_;
}
inline void BidRequest::set_conn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.conn)
}

// int32 devtype = 16;
inline void BidRequest::clear_devtype() {
  devtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::devtype() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.devtype)
  return devtype_;
}
inline void BidRequest::set_devtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  devtype_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.devtype)
}

// string operator = 17;
inline void BidRequest::clear_operator_() {
  operator__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::operator_() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.operator)
  return operator__.GetNoArena();
}
inline void BidRequest::set_operator_(const std::string& value) {
  
  operator__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.operator)
}
inline void BidRequest::set_operator_(std::string&& value) {
  
  operator__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.operator)
}
inline void BidRequest::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.operator)
}
inline void BidRequest::set_operator_(const char* value, size_t size) {
  
  operator__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.operator)
}
inline std::string* BidRequest::mutable_operator_() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.operator)
  return operator__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_operator_() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.operator)
  
  return operator__.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.operator)
}

// string imei = 18;
inline void BidRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::imei() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.imei)
  return imei_.GetNoArena();
}
inline void BidRequest::set_imei(const std::string& value) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.imei)
}
inline void BidRequest::set_imei(std::string&& value) {
  
  imei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.imei)
}
inline void BidRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.imei)
}
inline void BidRequest::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.imei)
}
inline std::string* BidRequest::mutable_imei() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.imei)
  return imei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_imei() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.imei)
  
  return imei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.imei)
}

// string oaid = 19;
inline void BidRequest::clear_oaid() {
  oaid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::oaid() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.oaid)
  return oaid_.GetNoArena();
}
inline void BidRequest::set_oaid(const std::string& value) {
  
  oaid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.oaid)
}
inline void BidRequest::set_oaid(std::string&& value) {
  
  oaid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.oaid)
}
inline void BidRequest::set_oaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oaid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.oaid)
}
inline void BidRequest::set_oaid(const char* value, size_t size) {
  
  oaid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.oaid)
}
inline std::string* BidRequest::mutable_oaid() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.oaid)
  return oaid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_oaid() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.oaid)
  
  return oaid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_oaid(std::string* oaid) {
  if (oaid != nullptr) {
    
  } else {
    
  }
  oaid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oaid);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.oaid)
}

// string android_id = 20;
inline void BidRequest::clear_android_id() {
  android_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::android_id() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.android_id)
  return android_id_.GetNoArena();
}
inline void BidRequest::set_android_id(const std::string& value) {
  
  android_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.android_id)
}
inline void BidRequest::set_android_id(std::string&& value) {
  
  android_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.android_id)
}
inline void BidRequest::set_android_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  android_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.android_id)
}
inline void BidRequest::set_android_id(const char* value, size_t size) {
  
  android_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.android_id)
}
inline std::string* BidRequest::mutable_android_id() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.android_id)
  return android_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_android_id() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.android_id)
  
  return android_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_android_id(std::string* android_id) {
  if (android_id != nullptr) {
    
  } else {
    
  }
  android_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), android_id);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.android_id)
}

// string idfa = 21;
inline void BidRequest::clear_idfa() {
  idfa_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::idfa() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.idfa)
  return idfa_.GetNoArena();
}
inline void BidRequest::set_idfa(const std::string& value) {
  
  idfa_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.idfa)
}
inline void BidRequest::set_idfa(std::string&& value) {
  
  idfa_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.idfa)
}
inline void BidRequest::set_idfa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idfa_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.idfa)
}
inline void BidRequest::set_idfa(const char* value, size_t size) {
  
  idfa_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.idfa)
}
inline std::string* BidRequest::mutable_idfa() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.idfa)
  return idfa_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_idfa() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.idfa)
  
  return idfa_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    
  } else {
    
  }
  idfa_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idfa);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.idfa)
}

// string idfv = 22;
inline void BidRequest::clear_idfv() {
  idfv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::idfv() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.idfv)
  return idfv_.GetNoArena();
}
inline void BidRequest::set_idfv(const std::string& value) {
  
  idfv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.idfv)
}
inline void BidRequest::set_idfv(std::string&& value) {
  
  idfv_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.idfv)
}
inline void BidRequest::set_idfv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idfv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.idfv)
}
inline void BidRequest::set_idfv(const char* value, size_t size) {
  
  idfv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.idfv)
}
inline std::string* BidRequest::mutable_idfv() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.idfv)
  return idfv_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_idfv() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.idfv)
  
  return idfv_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_idfv(std::string* idfv) {
  if (idfv != nullptr) {
    
  } else {
    
  }
  idfv_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idfv);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.idfv)
}

// string ip = 23;
inline void BidRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.ip)
  return ip_.GetNoArena();
}
inline void BidRequest::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.ip)
}
inline void BidRequest::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.ip)
}
inline void BidRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.ip)
}
inline void BidRequest::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.ip)
}
inline std::string* BidRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_ip() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.ip)
}

// float lat = 24;
inline void BidRequest::clear_lat() {
  lat_ = 0;
}
inline float BidRequest::lat() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.lat)
  return lat_;
}
inline void BidRequest::set_lat(float value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.lat)
}

// float lon = 25;
inline void BidRequest::clear_lon() {
  lon_ = 0;
}
inline float BidRequest::lon() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.lon)
  return lon_;
}
inline void BidRequest::set_lon(float value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.lon)
}

// int32 carrier = 26;
inline void BidRequest::clear_carrier() {
  carrier_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::carrier() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.carrier)
  return carrier_;
}
inline void BidRequest::set_carrier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  carrier_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.carrier)
}

// string app_ver = 27;
inline void BidRequest::clear_app_ver() {
  app_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidRequest::app_ver() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.app_ver)
  return app_ver_.GetNoArena();
}
inline void BidRequest::set_app_ver(const std::string& value) {
  
  app_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.app_ver)
}
inline void BidRequest::set_app_ver(std::string&& value) {
  
  app_ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidRequest.app_ver)
}
inline void BidRequest::set_app_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidRequest.app_ver)
}
inline void BidRequest::set_app_ver(const char* value, size_t size) {
  
  app_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidRequest.app_ver)
}
inline std::string* BidRequest::mutable_app_ver() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.app_ver)
  return app_ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidRequest::release_app_ver() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.app_ver)
  
  return app_ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_app_ver(std::string* app_ver) {
  if (app_ver != nullptr) {
    
  } else {
    
  }
  app_ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_ver);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.app_ver)
}

// int32 orientation = 28;
inline void BidRequest::clear_orientation() {
  orientation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::orientation() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.orientation)
  return orientation_;
}
inline void BidRequest::set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.orientation)
}

// int32 ppi = 29;
inline void BidRequest::clear_ppi() {
  ppi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidRequest::ppi() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.ppi)
  return ppi_;
}
inline void BidRequest::set_ppi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ppi_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidRequest.ppi)
}

// .xn_adp.tracking.LocationInfo location = 36;
inline bool BidRequest::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline void BidRequest::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::xn_adp::tracking::LocationInfo& BidRequest::location() const {
  const ::xn_adp::tracking::LocationInfo* p = location_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidRequest.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::LocationInfo*>(
      &::xn_adp::tracking::_LocationInfo_default_instance_);
}
inline ::xn_adp::tracking::LocationInfo* BidRequest::release_location() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidRequest.location)
  
  ::xn_adp::tracking::LocationInfo* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::LocationInfo* BidRequest::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::LocationInfo>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidRequest.location)
  return location_;
}
inline void BidRequest::set_allocated_location(::xn_adp::tracking::LocationInfo* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidRequest.location)
}

// -------------------------------------------------------------------

// BidResponse

// int32 dsp = 1;
inline void BidResponse::clear_dsp() {
  dsp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidResponse::dsp() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidResponse.dsp)
  return dsp_;
}
inline void BidResponse::set_dsp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dsp_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidResponse.dsp)
}

// int32 price = 2;
inline void BidResponse::clear_price() {
  price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidResponse::price() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidResponse.price)
  return price_;
}
inline void BidResponse::set_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidResponse.price)
}

// int32 action_type = 3;
inline void BidResponse::clear_action_type() {
  action_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidResponse::action_type() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidResponse.action_type)
  return action_type_;
}
inline void BidResponse::set_action_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidResponse.action_type)
}

// string crt_size = 4;
inline void BidResponse::clear_crt_size() {
  crt_size_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidResponse::crt_size() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidResponse.crt_size)
  return crt_size_.GetNoArena();
}
inline void BidResponse::set_crt_size(const std::string& value) {
  
  crt_size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidResponse.crt_size)
}
inline void BidResponse::set_crt_size(std::string&& value) {
  
  crt_size_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidResponse.crt_size)
}
inline void BidResponse::set_crt_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crt_size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidResponse.crt_size)
}
inline void BidResponse::set_crt_size(const char* value, size_t size) {
  
  crt_size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidResponse.crt_size)
}
inline std::string* BidResponse::mutable_crt_size() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidResponse.crt_size)
  return crt_size_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidResponse::release_crt_size() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidResponse.crt_size)
  
  return crt_size_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse::set_allocated_crt_size(std::string* crt_size) {
  if (crt_size != nullptr) {
    
  } else {
    
  }
  crt_size_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crt_size);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidResponse.crt_size)
}

// string ad_pkg = 5;
inline void BidResponse::clear_ad_pkg() {
  ad_pkg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidResponse::ad_pkg() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidResponse.ad_pkg)
  return ad_pkg_.GetNoArena();
}
inline void BidResponse::set_ad_pkg(const std::string& value) {
  
  ad_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidResponse.ad_pkg)
}
inline void BidResponse::set_ad_pkg(std::string&& value) {
  
  ad_pkg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidResponse.ad_pkg)
}
inline void BidResponse::set_ad_pkg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ad_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidResponse.ad_pkg)
}
inline void BidResponse::set_ad_pkg(const char* value, size_t size) {
  
  ad_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidResponse.ad_pkg)
}
inline std::string* BidResponse::mutable_ad_pkg() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidResponse.ad_pkg)
  return ad_pkg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidResponse::release_ad_pkg() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidResponse.ad_pkg)
  
  return ad_pkg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse::set_allocated_ad_pkg(std::string* ad_pkg) {
  if (ad_pkg != nullptr) {
    
  } else {
    
  }
  ad_pkg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ad_pkg);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidResponse.ad_pkg)
}

// .xn_adp.tracking.XNBidInfo xn_bi = 6;
inline bool BidResponse::has_xn_bi() const {
  return this != internal_default_instance() && xn_bi_ != nullptr;
}
inline void BidResponse::clear_xn_bi() {
  if (GetArenaNoVirtual() == nullptr && xn_bi_ != nullptr) {
    delete xn_bi_;
  }
  xn_bi_ = nullptr;
}
inline const ::xn_adp::tracking::XNBidInfo& BidResponse::xn_bi() const {
  const ::xn_adp::tracking::XNBidInfo* p = xn_bi_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidResponse.xn_bi)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::XNBidInfo*>(
      &::xn_adp::tracking::_XNBidInfo_default_instance_);
}
inline ::xn_adp::tracking::XNBidInfo* BidResponse::release_xn_bi() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidResponse.xn_bi)
  
  ::xn_adp::tracking::XNBidInfo* temp = xn_bi_;
  xn_bi_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::XNBidInfo* BidResponse::mutable_xn_bi() {
  
  if (xn_bi_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::XNBidInfo>(GetArenaNoVirtual());
    xn_bi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidResponse.xn_bi)
  return xn_bi_;
}
inline void BidResponse::set_allocated_xn_bi(::xn_adp::tracking::XNBidInfo* xn_bi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete xn_bi_;
  }
  if (xn_bi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      xn_bi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xn_bi, submessage_arena);
    }
    
  } else {
    
  }
  xn_bi_ = xn_bi;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidResponse.xn_bi)
}

// .xn_adp.tracking.ThirdBidInfo third_bi = 7;
inline bool BidResponse::has_third_bi() const {
  return this != internal_default_instance() && third_bi_ != nullptr;
}
inline void BidResponse::clear_third_bi() {
  if (GetArenaNoVirtual() == nullptr && third_bi_ != nullptr) {
    delete third_bi_;
  }
  third_bi_ = nullptr;
}
inline const ::xn_adp::tracking::ThirdBidInfo& BidResponse::third_bi() const {
  const ::xn_adp::tracking::ThirdBidInfo* p = third_bi_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidResponse.third_bi)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::ThirdBidInfo*>(
      &::xn_adp::tracking::_ThirdBidInfo_default_instance_);
}
inline ::xn_adp::tracking::ThirdBidInfo* BidResponse::release_third_bi() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidResponse.third_bi)
  
  ::xn_adp::tracking::ThirdBidInfo* temp = third_bi_;
  third_bi_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::ThirdBidInfo* BidResponse::mutable_third_bi() {
  
  if (third_bi_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::ThirdBidInfo>(GetArenaNoVirtual());
    third_bi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidResponse.third_bi)
  return third_bi_;
}
inline void BidResponse::set_allocated_third_bi(::xn_adp::tracking::ThirdBidInfo* third_bi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete third_bi_;
  }
  if (third_bi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      third_bi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, third_bi, submessage_arena);
    }
    
  } else {
    
  }
  third_bi_ = third_bi;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidResponse.third_bi)
}

// -------------------------------------------------------------------

// BidInfo

// .xn_adp.tracking.BidRequest req = 1;
inline bool BidInfo::has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline void BidInfo::clear_req() {
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
inline const ::xn_adp::tracking::BidRequest& BidInfo::req() const {
  const ::xn_adp::tracking::BidRequest* p = req_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidInfo.req)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::BidRequest*>(
      &::xn_adp::tracking::_BidRequest_default_instance_);
}
inline ::xn_adp::tracking::BidRequest* BidInfo::release_req() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidInfo.req)
  
  ::xn_adp::tracking::BidRequest* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::BidRequest* BidInfo::mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::BidRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidInfo.req)
  return req_;
}
inline void BidInfo::set_allocated_req(::xn_adp::tracking::BidRequest* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidInfo.req)
}

// .xn_adp.tracking.BidResponse resp = 2;
inline bool BidInfo::has_resp() const {
  return this != internal_default_instance() && resp_ != nullptr;
}
inline void BidInfo::clear_resp() {
  if (GetArenaNoVirtual() == nullptr && resp_ != nullptr) {
    delete resp_;
  }
  resp_ = nullptr;
}
inline const ::xn_adp::tracking::BidResponse& BidInfo::resp() const {
  const ::xn_adp::tracking::BidResponse* p = resp_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidInfo.resp)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::BidResponse*>(
      &::xn_adp::tracking::_BidResponse_default_instance_);
}
inline ::xn_adp::tracking::BidResponse* BidInfo::release_resp() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidInfo.resp)
  
  ::xn_adp::tracking::BidResponse* temp = resp_;
  resp_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::BidResponse* BidInfo::mutable_resp() {
  
  if (resp_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::BidResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidInfo.resp)
  return resp_;
}
inline void BidInfo::set_allocated_resp(::xn_adp::tracking::BidResponse* resp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resp_;
  }
  if (resp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    
  } else {
    
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidInfo.resp)
}

// string result = 3;
inline void BidInfo::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BidInfo::result() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidInfo.result)
  return result_.GetNoArena();
}
inline void BidInfo::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidInfo.result)
}
inline void BidInfo::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.BidInfo.result)
}
inline void BidInfo::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.BidInfo.result)
}
inline void BidInfo::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.BidInfo.result)
}
inline std::string* BidInfo::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.BidInfo.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BidInfo::release_result() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.BidInfo.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BidInfo::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.BidInfo.result)
}

// int32 win_price = 4;
inline void BidInfo::clear_win_price() {
  win_price_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BidInfo::win_price() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.BidInfo.win_price)
  return win_price_;
}
inline void BidInfo::set_win_price(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_price_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.BidInfo.win_price)
}

// -------------------------------------------------------------------

// TrackingLog

// .xn_adp.tracking.BidInfo bid_info = 1;
inline bool TrackingLog::has_bid_info() const {
  return this != internal_default_instance() && bid_info_ != nullptr;
}
inline void TrackingLog::clear_bid_info() {
  if (GetArenaNoVirtual() == nullptr && bid_info_ != nullptr) {
    delete bid_info_;
  }
  bid_info_ = nullptr;
}
inline const ::xn_adp::tracking::BidInfo& TrackingLog::bid_info() const {
  const ::xn_adp::tracking::BidInfo* p = bid_info_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.TrackingLog.bid_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::BidInfo*>(
      &::xn_adp::tracking::_BidInfo_default_instance_);
}
inline ::xn_adp::tracking::BidInfo* TrackingLog::release_bid_info() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.TrackingLog.bid_info)
  
  ::xn_adp::tracking::BidInfo* temp = bid_info_;
  bid_info_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::BidInfo* TrackingLog::mutable_bid_info() {
  
  if (bid_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::BidInfo>(GetArenaNoVirtual());
    bid_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.TrackingLog.bid_info)
  return bid_info_;
}
inline void TrackingLog::set_allocated_bid_info(::xn_adp::tracking::BidInfo* bid_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bid_info_;
  }
  if (bid_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bid_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bid_info, submessage_arena);
    }
    
  } else {
    
  }
  bid_info_ = bid_info;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.TrackingLog.bid_info)
}

// int64 event_time = 2;
inline void TrackingLog::clear_event_time() {
  event_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackingLog::event_time() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.TrackingLog.event_time)
  return event_time_;
}
inline void TrackingLog::set_event_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  event_time_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.TrackingLog.event_time)
}

// int32 event_code = 3;
inline void TrackingLog::clear_event_code() {
  event_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingLog::event_code() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.TrackingLog.event_code)
  return event_code_;
}
inline void TrackingLog::set_event_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_code_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.TrackingLog.event_code)
}

// string event_extra_info = 4;
inline void TrackingLog::clear_event_extra_info() {
  event_extra_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrackingLog::event_extra_info() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.TrackingLog.event_extra_info)
  return event_extra_info_.GetNoArena();
}
inline void TrackingLog::set_event_extra_info(const std::string& value) {
  
  event_extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.TrackingLog.event_extra_info)
}
inline void TrackingLog::set_event_extra_info(std::string&& value) {
  
  event_extra_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.TrackingLog.event_extra_info)
}
inline void TrackingLog::set_event_extra_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.TrackingLog.event_extra_info)
}
inline void TrackingLog::set_event_extra_info(const char* value, size_t size) {
  
  event_extra_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.TrackingLog.event_extra_info)
}
inline std::string* TrackingLog::mutable_event_extra_info() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.TrackingLog.event_extra_info)
  return event_extra_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackingLog::release_event_extra_info() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.TrackingLog.event_extra_info)
  
  return event_extra_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackingLog::set_allocated_event_extra_info(std::string* event_extra_info) {
  if (event_extra_info != nullptr) {
    
  } else {
    
  }
  event_extra_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_extra_info);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.TrackingLog.event_extra_info)
}

// int64 client_event_time = 5;
inline void TrackingLog::clear_client_event_time() {
  client_event_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackingLog::client_event_time() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.TrackingLog.client_event_time)
  return client_event_time_;
}
inline void TrackingLog::set_client_event_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_event_time_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.TrackingLog.client_event_time)
}

// int64 client_fill_time = 6;
inline void TrackingLog::clear_client_fill_time() {
  client_fill_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrackingLog::client_fill_time() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.TrackingLog.client_fill_time)
  return client_fill_time_;
}
inline void TrackingLog::set_client_fill_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  client_fill_time_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.TrackingLog.client_fill_time)
}

// int32 conv_event_code = 7;
inline void TrackingLog::clear_conv_event_code() {
  conv_event_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackingLog::conv_event_code() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.TrackingLog.conv_event_code)
  return conv_event_code_;
}
inline void TrackingLog::set_conv_event_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conv_event_code_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.TrackingLog.conv_event_code)
}

// -------------------------------------------------------------------

// AdxBrokerLog

// .xn_adp.tracking.BidRequest req = 1;
inline bool AdxBrokerLog::has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline void AdxBrokerLog::clear_req() {
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
inline const ::xn_adp::tracking::BidRequest& AdxBrokerLog::req() const {
  const ::xn_adp::tracking::BidRequest* p = req_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.AdxBrokerLog.req)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::BidRequest*>(
      &::xn_adp::tracking::_BidRequest_default_instance_);
}
inline ::xn_adp::tracking::BidRequest* AdxBrokerLog::release_req() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.AdxBrokerLog.req)
  
  ::xn_adp::tracking::BidRequest* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::BidRequest* AdxBrokerLog::mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::BidRequest>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.AdxBrokerLog.req)
  return req_;
}
inline void AdxBrokerLog::set_allocated_req(::xn_adp::tracking::BidRequest* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete req_;
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.AdxBrokerLog.req)
}

// .xn_adp.tracking.BidResponse resp = 2;
inline bool AdxBrokerLog::has_resp() const {
  return this != internal_default_instance() && resp_ != nullptr;
}
inline void AdxBrokerLog::clear_resp() {
  if (GetArenaNoVirtual() == nullptr && resp_ != nullptr) {
    delete resp_;
  }
  resp_ = nullptr;
}
inline const ::xn_adp::tracking::BidResponse& AdxBrokerLog::resp() const {
  const ::xn_adp::tracking::BidResponse* p = resp_;
  // @@protoc_insertion_point(field_get:xn_adp.tracking.AdxBrokerLog.resp)
  return p != nullptr ? *p : *reinterpret_cast<const ::xn_adp::tracking::BidResponse*>(
      &::xn_adp::tracking::_BidResponse_default_instance_);
}
inline ::xn_adp::tracking::BidResponse* AdxBrokerLog::release_resp() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.AdxBrokerLog.resp)
  
  ::xn_adp::tracking::BidResponse* temp = resp_;
  resp_ = nullptr;
  return temp;
}
inline ::xn_adp::tracking::BidResponse* AdxBrokerLog::mutable_resp() {
  
  if (resp_ == nullptr) {
    auto* p = CreateMaybeMessage<::xn_adp::tracking::BidResponse>(GetArenaNoVirtual());
    resp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.AdxBrokerLog.resp)
  return resp_;
}
inline void AdxBrokerLog::set_allocated_resp(::xn_adp::tracking::BidResponse* resp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resp_;
  }
  if (resp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    
  } else {
    
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.AdxBrokerLog.resp)
}

// string result = 3;
inline void AdxBrokerLog::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdxBrokerLog::result() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.AdxBrokerLog.result)
  return result_.GetNoArena();
}
inline void AdxBrokerLog::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.AdxBrokerLog.result)
}
inline void AdxBrokerLog::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.AdxBrokerLog.result)
}
inline void AdxBrokerLog::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.AdxBrokerLog.result)
}
inline void AdxBrokerLog::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.AdxBrokerLog.result)
}
inline std::string* AdxBrokerLog::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.AdxBrokerLog.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdxBrokerLog::release_result() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.AdxBrokerLog.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdxBrokerLog::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.AdxBrokerLog.result)
}

// int32 dsp = 4;
inline void AdxBrokerLog::clear_dsp() {
  dsp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdxBrokerLog::dsp() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.AdxBrokerLog.dsp)
  return dsp_;
}
inline void AdxBrokerLog::set_dsp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dsp_ = value;
  // @@protoc_insertion_point(field_set:xn_adp.tracking.AdxBrokerLog.dsp)
}

// string dsp_nbr = 5;
inline void AdxBrokerLog::clear_dsp_nbr() {
  dsp_nbr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AdxBrokerLog::dsp_nbr() const {
  // @@protoc_insertion_point(field_get:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
  return dsp_nbr_.GetNoArena();
}
inline void AdxBrokerLog::set_dsp_nbr(const std::string& value) {
  
  dsp_nbr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
}
inline void AdxBrokerLog::set_dsp_nbr(std::string&& value) {
  
  dsp_nbr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
}
inline void AdxBrokerLog::set_dsp_nbr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dsp_nbr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
}
inline void AdxBrokerLog::set_dsp_nbr(const char* value, size_t size) {
  
  dsp_nbr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
}
inline std::string* AdxBrokerLog::mutable_dsp_nbr() {
  
  // @@protoc_insertion_point(field_mutable:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
  return dsp_nbr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdxBrokerLog::release_dsp_nbr() {
  // @@protoc_insertion_point(field_release:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
  
  return dsp_nbr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdxBrokerLog::set_allocated_dsp_nbr(std::string* dsp_nbr) {
  if (dsp_nbr != nullptr) {
    
  } else {
    
  }
  dsp_nbr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dsp_nbr);
  // @@protoc_insertion_point(field_set_allocated:xn_adp.tracking.AdxBrokerLog.dsp_nbr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracking
}  // namespace xn_adp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tracking_2eproto
