// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ml.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ml_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ml_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ml_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ml_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ml_2eproto;
namespace xnad {
namespace ml {
class CandidateAd;
class CandidateAdDefaultTypeInternal;
extern CandidateAdDefaultTypeInternal _CandidateAd_default_instance_;
class PredictRequest;
class PredictRequestDefaultTypeInternal;
extern PredictRequestDefaultTypeInternal _PredictRequest_default_instance_;
class PredictResponse;
class PredictResponseDefaultTypeInternal;
extern PredictResponseDefaultTypeInternal _PredictResponse_default_instance_;
class PredictResult;
class PredictResultDefaultTypeInternal;
extern PredictResultDefaultTypeInternal _PredictResult_default_instance_;
}  // namespace ml
}  // namespace xnad
PROTOBUF_NAMESPACE_OPEN
template<> ::xnad::ml::CandidateAd* Arena::CreateMaybeMessage<::xnad::ml::CandidateAd>(Arena*);
template<> ::xnad::ml::PredictRequest* Arena::CreateMaybeMessage<::xnad::ml::PredictRequest>(Arena*);
template<> ::xnad::ml::PredictResponse* Arena::CreateMaybeMessage<::xnad::ml::PredictResponse>(Arena*);
template<> ::xnad::ml::PredictResult* Arena::CreateMaybeMessage<::xnad::ml::PredictResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xnad {
namespace ml {

// ===================================================================

class CandidateAd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xnad.ml.CandidateAd) */ {
 public:
  CandidateAd();
  virtual ~CandidateAd();

  CandidateAd(const CandidateAd& from);
  CandidateAd(CandidateAd&& from) noexcept
    : CandidateAd() {
    *this = ::std::move(from);
  }

  inline CandidateAd& operator=(const CandidateAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateAd& operator=(CandidateAd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandidateAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandidateAd* internal_default_instance() {
    return reinterpret_cast<const CandidateAd*>(
               &_CandidateAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CandidateAd* other);
  friend void swap(CandidateAd& a, CandidateAd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CandidateAd* New() const final {
    return CreateMaybeMessage<CandidateAd>(nullptr);
  }

  CandidateAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandidateAd& from);
  void MergeFrom(const CandidateAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xnad.ml.CandidateAd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ml_2eproto);
    return ::descriptor_table_ml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string category = 7;
  void clear_category();
  static const int kCategoryFieldNumber = 7;
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // int32 planid = 1;
  void clear_planid();
  static const int kPlanidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 planid() const;
  void set_planid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 campid = 2;
  void clear_campid();
  static const int kCampidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 campid() const;
  void set_campid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 advid = 3;
  void clear_advid();
  static const int kAdvidFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 advid() const;
  void set_advid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 landingtype = 4;
  void clear_landingtype();
  static const int kLandingtypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 landingtype() const;
  void set_landingtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 imptype = 5;
  void clear_imptype();
  static const int kImptypeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 imptype() const;
  void set_imptype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 actiontype = 6;
  void clear_actiontype();
  static const int kActiontypeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 actiontype() const;
  void set_actiontype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xnad.ml.CandidateAd)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::int32 planid_;
  ::PROTOBUF_NAMESPACE_ID::int32 campid_;
  ::PROTOBUF_NAMESPACE_ID::int32 advid_;
  ::PROTOBUF_NAMESPACE_ID::int32 landingtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 imptype_;
  ::PROTOBUF_NAMESPACE_ID::int32 actiontype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ml_2eproto;
};
// -------------------------------------------------------------------

class PredictRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xnad.ml.PredictRequest) */ {
 public:
  PredictRequest();
  virtual ~PredictRequest();

  PredictRequest(const PredictRequest& from);
  PredictRequest(PredictRequest&& from) noexcept
    : PredictRequest() {
    *this = ::std::move(from);
  }

  inline PredictRequest& operator=(const PredictRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictRequest& operator=(PredictRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictRequest* internal_default_instance() {
    return reinterpret_cast<const PredictRequest*>(
               &_PredictRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PredictRequest* other);
  friend void swap(PredictRequest& a, PredictRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictRequest* New() const final {
    return CreateMaybeMessage<PredictRequest>(nullptr);
  }

  PredictRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictRequest& from);
  void MergeFrom(const PredictRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xnad.ml.PredictRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ml_2eproto);
    return ::descriptor_table_ml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xnad.ml.CandidateAd ads = 30;
  int ads_size() const;
  void clear_ads();
  static const int kAdsFieldNumber = 30;
  ::xnad::ml::CandidateAd* mutable_ads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::CandidateAd >*
      mutable_ads();
  const ::xnad::ml::CandidateAd& ads(int index) const;
  ::xnad::ml::CandidateAd* add_ads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::CandidateAd >&
      ads() const;

  // string app_pkg = 5;
  void clear_app_pkg();
  static const int kAppPkgFieldNumber = 5;
  const std::string& app_pkg() const;
  void set_app_pkg(const std::string& value);
  void set_app_pkg(std::string&& value);
  void set_app_pkg(const char* value);
  void set_app_pkg(const char* value, size_t size);
  std::string* mutable_app_pkg();
  std::string* release_app_pkg();
  void set_allocated_app_pkg(std::string* app_pkg);

  // string app_name = 6;
  void clear_app_name();
  static const int kAppNameFieldNumber = 6;
  const std::string& app_name() const;
  void set_app_name(const std::string& value);
  void set_app_name(std::string&& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  std::string* mutable_app_name();
  std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);

  // string app_ver = 9;
  void clear_app_ver();
  static const int kAppVerFieldNumber = 9;
  const std::string& app_ver() const;
  void set_app_ver(const std::string& value);
  void set_app_ver(std::string&& value);
  void set_app_ver(const char* value);
  void set_app_ver(const char* value, size_t size);
  std::string* mutable_app_ver();
  std::string* release_app_ver();
  void set_allocated_app_ver(std::string* app_ver);

  // string osv = 11;
  void clear_osv();
  static const int kOsvFieldNumber = 11;
  const std::string& osv() const;
  void set_osv(const std::string& value);
  void set_osv(std::string&& value);
  void set_osv(const char* value);
  void set_osv(const char* value, size_t size);
  std::string* mutable_osv();
  std::string* release_osv();
  void set_allocated_osv(std::string* osv);

  // string brand = 12;
  void clear_brand();
  static const int kBrandFieldNumber = 12;
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);

  // string model = 13;
  void clear_model();
  static const int kModelFieldNumber = 13;
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);

  // string sdk_ver = 16;
  void clear_sdk_ver();
  static const int kSdkVerFieldNumber = 16;
  const std::string& sdk_ver() const;
  void set_sdk_ver(const std::string& value);
  void set_sdk_ver(std::string&& value);
  void set_sdk_ver(const char* value);
  void set_sdk_ver(const char* value, size_t size);
  std::string* mutable_sdk_ver();
  std::string* release_sdk_ver();
  void set_allocated_sdk_ver(std::string* sdk_ver);

  // string operator = 24;
  void clear_operator_();
  static const int kOperatorFieldNumber = 24;
  const std::string& operator_() const;
  void set_operator_(const std::string& value);
  void set_operator_(std::string&& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  std::string* mutable_operator_();
  std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);

  // string ip = 26;
  void clear_ip();
  static const int kIpFieldNumber = 26;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string province = 27;
  void clear_province();
  static const int kProvinceFieldNumber = 27;
  const std::string& province() const;
  void set_province(const std::string& value);
  void set_province(std::string&& value);
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  std::string* mutable_province();
  std::string* release_province();
  void set_allocated_province(std::string* province);

  // string city = 28;
  void clear_city();
  static const int kCityFieldNumber = 28;
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);

  // string carrier = 29;
  void clear_carrier();
  static const int kCarrierFieldNumber = 29;
  const std::string& carrier() const;
  void set_carrier(const std::string& value);
  void set_carrier(std::string&& value);
  void set_carrier(const char* value);
  void set_carrier(const char* value, size_t size);
  std::string* mutable_carrier();
  std::string* release_carrier();
  void set_allocated_carrier(std::string* carrier);

  // int32 pub_id = 1;
  void clear_pub_id();
  static const int kPubIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 pub_id() const;
  void set_pub_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 app_id = 2;
  void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 placement_id = 3;
  void clear_placement_id();
  static const int kPlacementIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 placement_id() const;
  void set_placement_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 imp_type = 4;
  void clear_imp_type();
  static const int kImpTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 imp_type() const;
  void set_imp_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 w = 7;
  void clear_w();
  static const int kWFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 h = 8;
  void clear_h();
  static const int kHFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 os = 10;
  void clear_os();
  static const int kOsFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 os() const;
  void set_os(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 devtype = 14;
  void clear_devtype();
  static const int kDevtypeFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 devtype() const;
  void set_devtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ppi = 15;
  void clear_ppi();
  static const int kPpiFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 ppi() const;
  void set_ppi(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 orientation = 21;
  void clear_orientation();
  static const int kOrientationFieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::int32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 conn = 25;
  void clear_conn();
  static const int kConnFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int32 conn() const;
  void set_conn(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xnad.ml.PredictRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::CandidateAd > ads_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_pkg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr province_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr carrier_;
  ::PROTOBUF_NAMESPACE_ID::int32 pub_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 placement_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 imp_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_;
  ::PROTOBUF_NAMESPACE_ID::int32 devtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 ppi_;
  ::PROTOBUF_NAMESPACE_ID::int32 orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 conn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ml_2eproto;
};
// -------------------------------------------------------------------

class PredictResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xnad.ml.PredictResult) */ {
 public:
  PredictResult();
  virtual ~PredictResult();

  PredictResult(const PredictResult& from);
  PredictResult(PredictResult&& from) noexcept
    : PredictResult() {
    *this = ::std::move(from);
  }

  inline PredictResult& operator=(const PredictResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictResult& operator=(PredictResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictResult* internal_default_instance() {
    return reinterpret_cast<const PredictResult*>(
               &_PredictResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PredictResult* other);
  friend void swap(PredictResult& a, PredictResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictResult* New() const final {
    return CreateMaybeMessage<PredictResult>(nullptr);
  }

  PredictResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictResult& from);
  void MergeFrom(const PredictResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xnad.ml.PredictResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ml_2eproto);
    return ::descriptor_table_ml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 planid = 1;
  void clear_planid();
  static const int kPlanidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 planid() const;
  void set_planid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 pctr = 2;
  void clear_pctr();
  static const int kPctrFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 pctr() const;
  void set_pctr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 pcvr = 3;
  void clear_pcvr();
  static const int kPcvrFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 pcvr() const;
  void set_pcvr(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xnad.ml.PredictResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 planid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pctr_;
  ::PROTOBUF_NAMESPACE_ID::int32 pcvr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ml_2eproto;
};
// -------------------------------------------------------------------

class PredictResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xnad.ml.PredictResponse) */ {
 public:
  PredictResponse();
  virtual ~PredictResponse();

  PredictResponse(const PredictResponse& from);
  PredictResponse(PredictResponse&& from) noexcept
    : PredictResponse() {
    *this = ::std::move(from);
  }

  inline PredictResponse& operator=(const PredictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictResponse& operator=(PredictResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictResponse* internal_default_instance() {
    return reinterpret_cast<const PredictResponse*>(
               &_PredictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PredictResponse* other);
  friend void swap(PredictResponse& a, PredictResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictResponse* New() const final {
    return CreateMaybeMessage<PredictResponse>(nullptr);
  }

  PredictResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictResponse& from);
  void MergeFrom(const PredictResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xnad.ml.PredictResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ml_2eproto);
    return ::descriptor_table_ml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .xnad.ml.PredictResult data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::xnad::ml::PredictResult* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::PredictResult >*
      mutable_data();
  const ::xnad::ml::PredictResult& data(int index) const;
  ::xnad::ml::PredictResult* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::PredictResult >&
      data() const;

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:xnad.ml.PredictResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::PredictResult > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ml_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CandidateAd

// int32 planid = 1;
inline void CandidateAd::clear_planid() {
  planid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateAd::planid() const {
  // @@protoc_insertion_point(field_get:xnad.ml.CandidateAd.planid)
  return planid_;
}
inline void CandidateAd::set_planid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planid_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.CandidateAd.planid)
}

// int32 campid = 2;
inline void CandidateAd::clear_campid() {
  campid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateAd::campid() const {
  // @@protoc_insertion_point(field_get:xnad.ml.CandidateAd.campid)
  return campid_;
}
inline void CandidateAd::set_campid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.CandidateAd.campid)
}

// int32 advid = 3;
inline void CandidateAd::clear_advid() {
  advid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateAd::advid() const {
  // @@protoc_insertion_point(field_get:xnad.ml.CandidateAd.advid)
  return advid_;
}
inline void CandidateAd::set_advid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  advid_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.CandidateAd.advid)
}

// int32 landingtype = 4;
inline void CandidateAd::clear_landingtype() {
  landingtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateAd::landingtype() const {
  // @@protoc_insertion_point(field_get:xnad.ml.CandidateAd.landingtype)
  return landingtype_;
}
inline void CandidateAd::set_landingtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  landingtype_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.CandidateAd.landingtype)
}

// int32 imptype = 5;
inline void CandidateAd::clear_imptype() {
  imptype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateAd::imptype() const {
  // @@protoc_insertion_point(field_get:xnad.ml.CandidateAd.imptype)
  return imptype_;
}
inline void CandidateAd::set_imptype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  imptype_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.CandidateAd.imptype)
}

// int32 actiontype = 6;
inline void CandidateAd::clear_actiontype() {
  actiontype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateAd::actiontype() const {
  // @@protoc_insertion_point(field_get:xnad.ml.CandidateAd.actiontype)
  return actiontype_;
}
inline void CandidateAd::set_actiontype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.CandidateAd.actiontype)
}

// string category = 7;
inline void CandidateAd::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CandidateAd::category() const {
  // @@protoc_insertion_point(field_get:xnad.ml.CandidateAd.category)
  return category_.GetNoArena();
}
inline void CandidateAd::set_category(const std::string& value) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.CandidateAd.category)
}
inline void CandidateAd::set_category(std::string&& value) {
  
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.CandidateAd.category)
}
inline void CandidateAd::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.CandidateAd.category)
}
inline void CandidateAd::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.CandidateAd.category)
}
inline std::string* CandidateAd::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.CandidateAd.category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CandidateAd::release_category() {
  // @@protoc_insertion_point(field_release:xnad.ml.CandidateAd.category)
  
  return category_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CandidateAd::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.CandidateAd.category)
}

// -------------------------------------------------------------------

// PredictRequest

// int32 pub_id = 1;
inline void PredictRequest::clear_pub_id() {
  pub_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::pub_id() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.pub_id)
  return pub_id_;
}
inline void PredictRequest::set_pub_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pub_id_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.pub_id)
}

// int32 app_id = 2;
inline void PredictRequest::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::app_id() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.app_id)
  return app_id_;
}
inline void PredictRequest::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.app_id)
}

// int32 placement_id = 3;
inline void PredictRequest::clear_placement_id() {
  placement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::placement_id() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.placement_id)
  return placement_id_;
}
inline void PredictRequest::set_placement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  placement_id_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.placement_id)
}

// int32 imp_type = 4;
inline void PredictRequest::clear_imp_type() {
  imp_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::imp_type() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.imp_type)
  return imp_type_;
}
inline void PredictRequest::set_imp_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  imp_type_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.imp_type)
}

// string app_pkg = 5;
inline void PredictRequest::clear_app_pkg() {
  app_pkg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::app_pkg() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.app_pkg)
  return app_pkg_.GetNoArena();
}
inline void PredictRequest::set_app_pkg(const std::string& value) {
  
  app_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.app_pkg)
}
inline void PredictRequest::set_app_pkg(std::string&& value) {
  
  app_pkg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.app_pkg)
}
inline void PredictRequest::set_app_pkg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.app_pkg)
}
inline void PredictRequest::set_app_pkg(const char* value, size_t size) {
  
  app_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.app_pkg)
}
inline std::string* PredictRequest::mutable_app_pkg() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.app_pkg)
  return app_pkg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_app_pkg() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.app_pkg)
  
  return app_pkg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_app_pkg(std::string* app_pkg) {
  if (app_pkg != nullptr) {
    
  } else {
    
  }
  app_pkg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_pkg);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.app_pkg)
}

// string app_name = 6;
inline void PredictRequest::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::app_name() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.app_name)
  return app_name_.GetNoArena();
}
inline void PredictRequest::set_app_name(const std::string& value) {
  
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.app_name)
}
inline void PredictRequest::set_app_name(std::string&& value) {
  
  app_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.app_name)
}
inline void PredictRequest::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.app_name)
}
inline void PredictRequest::set_app_name(const char* value, size_t size) {
  
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.app_name)
}
inline std::string* PredictRequest::mutable_app_name() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.app_name)
  return app_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_app_name() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.app_name)
  
  return app_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    
  } else {
    
  }
  app_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.app_name)
}

// int32 w = 7;
inline void PredictRequest::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::w() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.w)
  return w_;
}
inline void PredictRequest::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.w)
}

// int32 h = 8;
inline void PredictRequest::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::h() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.h)
  return h_;
}
inline void PredictRequest::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.h)
}

// string app_ver = 9;
inline void PredictRequest::clear_app_ver() {
  app_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::app_ver() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.app_ver)
  return app_ver_.GetNoArena();
}
inline void PredictRequest::set_app_ver(const std::string& value) {
  
  app_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.app_ver)
}
inline void PredictRequest::set_app_ver(std::string&& value) {
  
  app_ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.app_ver)
}
inline void PredictRequest::set_app_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.app_ver)
}
inline void PredictRequest::set_app_ver(const char* value, size_t size) {
  
  app_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.app_ver)
}
inline std::string* PredictRequest::mutable_app_ver() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.app_ver)
  return app_ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_app_ver() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.app_ver)
  
  return app_ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_app_ver(std::string* app_ver) {
  if (app_ver != nullptr) {
    
  } else {
    
  }
  app_ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_ver);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.app_ver)
}

// int32 os = 10;
inline void PredictRequest::clear_os() {
  os_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::os() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.os)
  return os_;
}
inline void PredictRequest::set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.os)
}

// string osv = 11;
inline void PredictRequest::clear_osv() {
  osv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::osv() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.osv)
  return osv_.GetNoArena();
}
inline void PredictRequest::set_osv(const std::string& value) {
  
  osv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.osv)
}
inline void PredictRequest::set_osv(std::string&& value) {
  
  osv_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.osv)
}
inline void PredictRequest::set_osv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.osv)
}
inline void PredictRequest::set_osv(const char* value, size_t size) {
  
  osv_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.osv)
}
inline std::string* PredictRequest::mutable_osv() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.osv)
  return osv_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_osv() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.osv)
  
  return osv_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_osv(std::string* osv) {
  if (osv != nullptr) {
    
  } else {
    
  }
  osv_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osv);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.osv)
}

// string brand = 12;
inline void PredictRequest::clear_brand() {
  brand_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::brand() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.brand)
  return brand_.GetNoArena();
}
inline void PredictRequest::set_brand(const std::string& value) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.brand)
}
inline void PredictRequest::set_brand(std::string&& value) {
  
  brand_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.brand)
}
inline void PredictRequest::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.brand)
}
inline void PredictRequest::set_brand(const char* value, size_t size) {
  
  brand_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.brand)
}
inline std::string* PredictRequest::mutable_brand() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.brand)
  return brand_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_brand() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.brand)
  
  return brand_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.brand)
}

// string model = 13;
inline void PredictRequest::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::model() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.model)
  return model_.GetNoArena();
}
inline void PredictRequest::set_model(const std::string& value) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.model)
}
inline void PredictRequest::set_model(std::string&& value) {
  
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.model)
}
inline void PredictRequest::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.model)
}
inline void PredictRequest::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.model)
}
inline std::string* PredictRequest::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.model)
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_model() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.model)
  
  return model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.model)
}

// int32 devtype = 14;
inline void PredictRequest::clear_devtype() {
  devtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::devtype() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.devtype)
  return devtype_;
}
inline void PredictRequest::set_devtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  devtype_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.devtype)
}

// int32 ppi = 15;
inline void PredictRequest::clear_ppi() {
  ppi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::ppi() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.ppi)
  return ppi_;
}
inline void PredictRequest::set_ppi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ppi_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.ppi)
}

// string sdk_ver = 16;
inline void PredictRequest::clear_sdk_ver() {
  sdk_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::sdk_ver() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.sdk_ver)
  return sdk_ver_.GetNoArena();
}
inline void PredictRequest::set_sdk_ver(const std::string& value) {
  
  sdk_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.sdk_ver)
}
inline void PredictRequest::set_sdk_ver(std::string&& value) {
  
  sdk_ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.sdk_ver)
}
inline void PredictRequest::set_sdk_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdk_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.sdk_ver)
}
inline void PredictRequest::set_sdk_ver(const char* value, size_t size) {
  
  sdk_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.sdk_ver)
}
inline std::string* PredictRequest::mutable_sdk_ver() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.sdk_ver)
  return sdk_ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_sdk_ver() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.sdk_ver)
  
  return sdk_ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_sdk_ver(std::string* sdk_ver) {
  if (sdk_ver != nullptr) {
    
  } else {
    
  }
  sdk_ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_ver);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.sdk_ver)
}

// int32 orientation = 21;
inline void PredictRequest::clear_orientation() {
  orientation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::orientation() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.orientation)
  return orientation_;
}
inline void PredictRequest::set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.orientation)
}

// string operator = 24;
inline void PredictRequest::clear_operator_() {
  operator__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::operator_() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.operator)
  return operator__.GetNoArena();
}
inline void PredictRequest::set_operator_(const std::string& value) {
  
  operator__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.operator)
}
inline void PredictRequest::set_operator_(std::string&& value) {
  
  operator__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.operator)
}
inline void PredictRequest::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.operator)
}
inline void PredictRequest::set_operator_(const char* value, size_t size) {
  
  operator__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.operator)
}
inline std::string* PredictRequest::mutable_operator_() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.operator)
  return operator__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_operator_() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.operator)
  
  return operator__.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.operator)
}

// int32 conn = 25;
inline void PredictRequest::clear_conn() {
  conn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::conn() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.conn)
  return conn_;
}
inline void PredictRequest::set_conn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conn_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.conn)
}

// string ip = 26;
inline void PredictRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::ip() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.ip)
  return ip_.GetNoArena();
}
inline void PredictRequest::set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.ip)
}
inline void PredictRequest::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.ip)
}
inline void PredictRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.ip)
}
inline void PredictRequest::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.ip)
}
inline std::string* PredictRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_ip() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.ip)
}

// string province = 27;
inline void PredictRequest::clear_province() {
  province_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::province() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.province)
  return province_.GetNoArena();
}
inline void PredictRequest::set_province(const std::string& value) {
  
  province_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.province)
}
inline void PredictRequest::set_province(std::string&& value) {
  
  province_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.province)
}
inline void PredictRequest::set_province(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  province_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.province)
}
inline void PredictRequest::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.province)
}
inline std::string* PredictRequest::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.province)
  return province_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_province() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.province)
  
  return province_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_province(std::string* province) {
  if (province != nullptr) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.province)
}

// string city = 28;
inline void PredictRequest::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::city() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.city)
  return city_.GetNoArena();
}
inline void PredictRequest::set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.city)
}
inline void PredictRequest::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.city)
}
inline void PredictRequest::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.city)
}
inline void PredictRequest::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.city)
}
inline std::string* PredictRequest::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.city)
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_city() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.city)
}

// string carrier = 29;
inline void PredictRequest::clear_carrier() {
  carrier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictRequest::carrier() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.carrier)
  return carrier_.GetNoArena();
}
inline void PredictRequest::set_carrier(const std::string& value) {
  
  carrier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictRequest.carrier)
}
inline void PredictRequest::set_carrier(std::string&& value) {
  
  carrier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictRequest.carrier)
}
inline void PredictRequest::set_carrier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  carrier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictRequest.carrier)
}
inline void PredictRequest::set_carrier(const char* value, size_t size) {
  
  carrier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictRequest.carrier)
}
inline std::string* PredictRequest::mutable_carrier() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.carrier)
  return carrier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictRequest::release_carrier() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictRequest.carrier)
  
  return carrier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictRequest::set_allocated_carrier(std::string* carrier) {
  if (carrier != nullptr) {
    
  } else {
    
  }
  carrier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), carrier);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictRequest.carrier)
}

// repeated .xnad.ml.CandidateAd ads = 30;
inline int PredictRequest::ads_size() const {
  return ads_.size();
}
inline void PredictRequest::clear_ads() {
  ads_.Clear();
}
inline ::xnad::ml::CandidateAd* PredictRequest::mutable_ads(int index) {
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictRequest.ads)
  return ads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::CandidateAd >*
PredictRequest::mutable_ads() {
  // @@protoc_insertion_point(field_mutable_list:xnad.ml.PredictRequest.ads)
  return &ads_;
}
inline const ::xnad::ml::CandidateAd& PredictRequest::ads(int index) const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictRequest.ads)
  return ads_.Get(index);
}
inline ::xnad::ml::CandidateAd* PredictRequest::add_ads() {
  // @@protoc_insertion_point(field_add:xnad.ml.PredictRequest.ads)
  return ads_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::CandidateAd >&
PredictRequest::ads() const {
  // @@protoc_insertion_point(field_list:xnad.ml.PredictRequest.ads)
  return ads_;
}

// -------------------------------------------------------------------

// PredictResult

// int32 planid = 1;
inline void PredictResult::clear_planid() {
  planid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictResult::planid() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictResult.planid)
  return planid_;
}
inline void PredictResult::set_planid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  planid_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictResult.planid)
}

// int32 pctr = 2;
inline void PredictResult::clear_pctr() {
  pctr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictResult::pctr() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictResult.pctr)
  return pctr_;
}
inline void PredictResult::set_pctr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pctr_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictResult.pctr)
}

// int32 pcvr = 3;
inline void PredictResult::clear_pcvr() {
  pcvr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictResult::pcvr() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictResult.pcvr)
  return pcvr_;
}
inline void PredictResult::set_pcvr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pcvr_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictResult.pcvr)
}

// -------------------------------------------------------------------

// PredictResponse

// int32 code = 1;
inline void PredictResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictResponse::code() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictResponse.code)
  return code_;
}
inline void PredictResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:xnad.ml.PredictResponse.code)
}

// string msg = 2;
inline void PredictResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PredictResponse::msg() const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictResponse.msg)
  return msg_.GetNoArena();
}
inline void PredictResponse::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnad.ml.PredictResponse.msg)
}
inline void PredictResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnad.ml.PredictResponse.msg)
}
inline void PredictResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnad.ml.PredictResponse.msg)
}
inline void PredictResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnad.ml.PredictResponse.msg)
}
inline std::string* PredictResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictResponse.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PredictResponse::release_msg() {
  // @@protoc_insertion_point(field_release:xnad.ml.PredictResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PredictResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:xnad.ml.PredictResponse.msg)
}

// repeated .xnad.ml.PredictResult data = 3;
inline int PredictResponse::data_size() const {
  return data_.size();
}
inline void PredictResponse::clear_data() {
  data_.Clear();
}
inline ::xnad::ml::PredictResult* PredictResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:xnad.ml.PredictResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::PredictResult >*
PredictResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:xnad.ml.PredictResponse.data)
  return &data_;
}
inline const ::xnad::ml::PredictResult& PredictResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:xnad.ml.PredictResponse.data)
  return data_.Get(index);
}
inline ::xnad::ml::PredictResult* PredictResponse::add_data() {
  // @@protoc_insertion_point(field_add:xnad.ml.PredictResponse.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xnad::ml::PredictResult >&
PredictResponse::data() const {
  // @@protoc_insertion_point(field_list:xnad.ml.PredictResponse.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ml
}  // namespace xnad

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ml_2eproto
