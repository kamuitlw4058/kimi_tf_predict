// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking.proto

#include "tracking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tracking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BidInfo_tracking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tracking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BidRequest_tracking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tracking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BidResponse_tracking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tracking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationInfo_tracking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tracking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThirdBidInfo_tracking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tracking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XNBidInfo_tracking_2eproto;
namespace xn_adp {
namespace tracking {
class XNBidInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XNBidInfo> _instance;
} _XNBidInfo_default_instance_;
class ThirdBidInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThirdBidInfo> _instance;
} _ThirdBidInfo_default_instance_;
class LocationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationInfo> _instance;
} _LocationInfo_default_instance_;
class BidRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BidRequest> _instance;
} _BidRequest_default_instance_;
class BidResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BidResponse> _instance;
} _BidResponse_default_instance_;
class BidInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BidInfo> _instance;
} _BidInfo_default_instance_;
class TrackingLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackingLog> _instance;
} _TrackingLog_default_instance_;
class AdxBrokerLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdxBrokerLog> _instance;
} _AdxBrokerLog_default_instance_;
}  // namespace tracking
}  // namespace xn_adp
static void InitDefaultsscc_info_AdxBrokerLog_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_AdxBrokerLog_default_instance_;
    new (ptr) ::xn_adp::tracking::AdxBrokerLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::AdxBrokerLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AdxBrokerLog_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AdxBrokerLog_tracking_2eproto}, {
      &scc_info_BidRequest_tracking_2eproto.base,
      &scc_info_BidResponse_tracking_2eproto.base,}};

static void InitDefaultsscc_info_BidInfo_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_BidInfo_default_instance_;
    new (ptr) ::xn_adp::tracking::BidInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::BidInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BidInfo_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BidInfo_tracking_2eproto}, {
      &scc_info_BidRequest_tracking_2eproto.base,
      &scc_info_BidResponse_tracking_2eproto.base,}};

static void InitDefaultsscc_info_BidRequest_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_BidRequest_default_instance_;
    new (ptr) ::xn_adp::tracking::BidRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::BidRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BidRequest_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BidRequest_tracking_2eproto}, {
      &scc_info_LocationInfo_tracking_2eproto.base,}};

static void InitDefaultsscc_info_BidResponse_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_BidResponse_default_instance_;
    new (ptr) ::xn_adp::tracking::BidResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::BidResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BidResponse_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BidResponse_tracking_2eproto}, {
      &scc_info_XNBidInfo_tracking_2eproto.base,
      &scc_info_ThirdBidInfo_tracking_2eproto.base,}};

static void InitDefaultsscc_info_LocationInfo_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_LocationInfo_default_instance_;
    new (ptr) ::xn_adp::tracking::LocationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::LocationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocationInfo_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LocationInfo_tracking_2eproto}, {}};

static void InitDefaultsscc_info_ThirdBidInfo_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_ThirdBidInfo_default_instance_;
    new (ptr) ::xn_adp::tracking::ThirdBidInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::ThirdBidInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThirdBidInfo_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ThirdBidInfo_tracking_2eproto}, {}};

static void InitDefaultsscc_info_TrackingLog_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_TrackingLog_default_instance_;
    new (ptr) ::xn_adp::tracking::TrackingLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::TrackingLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackingLog_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrackingLog_tracking_2eproto}, {
      &scc_info_BidInfo_tracking_2eproto.base,}};

static void InitDefaultsscc_info_XNBidInfo_tracking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xn_adp::tracking::_XNBidInfo_default_instance_;
    new (ptr) ::xn_adp::tracking::XNBidInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xn_adp::tracking::XNBidInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_XNBidInfo_tracking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_XNBidInfo_tracking_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tracking_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tracking_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tracking_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tracking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, advid_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, campid_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, planid_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, crtid_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, bidtime_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, bidtype_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, fctype_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, pctr_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, pcvr_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::XNBidInfo, algo_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::ThirdBidInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::ThirdBidInfo, bid_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::ThirdBidInfo, camp_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::ThirdBidInfo, ad_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::ThirdBidInfo, crt_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, province_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, city_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, district_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, street_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, street_number_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, address_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::LocationInfo, poi_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, req_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, req_time_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, pub_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, placement_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, imp_type_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, w_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, h_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, sdkv_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, os_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, osv_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, brand_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, model_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, conn_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, devtype_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, operator__),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, imei_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, oaid_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, android_id_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, idfa_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, idfv_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, ip_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, lat_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, lon_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, carrier_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, app_ver_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, orientation_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, ppi_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidRequest, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, dsp_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, price_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, action_type_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, crt_size_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, ad_pkg_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, xn_bi_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidResponse, third_bi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidInfo, req_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidInfo, resp_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidInfo, result_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::BidInfo, win_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, bid_info_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, event_time_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, event_code_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, event_extra_info_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, client_event_time_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, client_fill_time_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::TrackingLog, conv_event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::AdxBrokerLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::AdxBrokerLog, req_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::AdxBrokerLog, resp_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::AdxBrokerLog, result_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::AdxBrokerLog, dsp_),
  PROTOBUF_FIELD_OFFSET(::xn_adp::tracking::AdxBrokerLog, dsp_nbr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xn_adp::tracking::XNBidInfo)},
  { 15, -1, sizeof(::xn_adp::tracking::ThirdBidInfo)},
  { 24, -1, sizeof(::xn_adp::tracking::LocationInfo)},
  { 36, -1, sizeof(::xn_adp::tracking::BidRequest)},
  { 70, -1, sizeof(::xn_adp::tracking::BidResponse)},
  { 82, -1, sizeof(::xn_adp::tracking::BidInfo)},
  { 91, -1, sizeof(::xn_adp::tracking::TrackingLog)},
  { 103, -1, sizeof(::xn_adp::tracking::AdxBrokerLog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_XNBidInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_ThirdBidInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_LocationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_BidRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_BidResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_BidInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_TrackingLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xn_adp::tracking::_AdxBrokerLog_default_instance_),
};

const char descriptor_table_protodef_tracking_2eproto[] =
  "\n\016tracking.proto\022\017xn_adp.tracking\"\251\001\n\tXN"
  "BidInfo\022\r\n\005advid\030\001 \001(\005\022\016\n\006campid\030\002 \001(\005\022\016"
  "\n\006planid\030\003 \001(\005\022\r\n\005crtid\030\004 \001(\005\022\017\n\007bidtime"
  "\030\005 \001(\003\022\017\n\007bidtype\030\006 \001(\005\022\016\n\006fctype\030\007 \001(\005\022"
  "\014\n\004pctr\030\010 \001(\005\022\014\n\004pcvr\030\t \001(\005\022\020\n\010algo_tag\030"
  "\n \001(\t\"N\n\014ThirdBidInfo\022\016\n\006bid_id\030\001 \001(\t\022\017\n"
  "\007camp_id\030\002 \001(\t\022\r\n\005ad_id\030\003 \001(\t\022\016\n\006crt_id\030"
  "\004 \001(\t\"\212\001\n\014LocationInfo\022\020\n\010province\030\001 \001(\t"
  "\022\014\n\004city\030\002 \001(\t\022\020\n\010district\030\003 \001(\t\022\016\n\006stre"
  "et\030\004 \001(\t\022\025\n\rstreet_number\030\005 \001(\t\022\017\n\007addre"
  "ss\030\006 \001(\t\022\020\n\010poi_name\030\007 \001(\t\"\351\003\n\nBidReques"
  "t\022\016\n\006req_id\030\001 \001(\003\022\020\n\010req_time\030\002 \001(\003\022\016\n\006p"
  "ub_id\030\003 \001(\005\022\016\n\006app_id\030\004 \001(\005\022\024\n\014placement"
  "_id\030\005 \001(\005\022\020\n\010imp_type\030\006 \001(\005\022\t\n\001w\030\007 \001(\005\022\t"
  "\n\001h\030\010 \001(\005\022\014\n\004sdkv\030\n \001(\t\022\n\n\002os\030\013 \001(\005\022\013\n\003o"
  "sv\030\014 \001(\t\022\r\n\005brand\030\r \001(\t\022\r\n\005model\030\016 \001(\t\022\014"
  "\n\004conn\030\017 \001(\005\022\017\n\007devtype\030\020 \001(\005\022\020\n\010operato"
  "r\030\021 \001(\t\022\014\n\004imei\030\022 \001(\t\022\014\n\004oaid\030\023 \001(\t\022\022\n\na"
  "ndroid_id\030\024 \001(\t\022\014\n\004idfa\030\025 \001(\t\022\014\n\004idfv\030\026 "
  "\001(\t\022\n\n\002ip\030\027 \001(\t\022\013\n\003lat\030\030 \001(\002\022\013\n\003lon\030\031 \001("
  "\002\022\017\n\007carrier\030\032 \001(\005\022\017\n\007app_ver\030\033 \001(\t\022\023\n\013o"
  "rientation\030\034 \001(\005\022\013\n\003ppi\030\035 \001(\005\022/\n\010locatio"
  "n\030$ \001(\0132\035.xn_adp.tracking.LocationInfo\"\274"
  "\001\n\013BidResponse\022\013\n\003dsp\030\001 \001(\005\022\r\n\005price\030\002 \001"
  "(\005\022\023\n\013action_type\030\003 \001(\005\022\020\n\010crt_size\030\004 \001("
  "\t\022\016\n\006ad_pkg\030\005 \001(\t\022)\n\005xn_bi\030\006 \001(\0132\032.xn_ad"
  "p.tracking.XNBidInfo\022/\n\010third_bi\030\007 \001(\0132\035"
  ".xn_adp.tracking.ThirdBidInfo\"\202\001\n\007BidInf"
  "o\022(\n\003req\030\001 \001(\0132\033.xn_adp.tracking.BidRequ"
  "est\022*\n\004resp\030\002 \001(\0132\034.xn_adp.tracking.BidR"
  "esponse\022\016\n\006result\030\003 \001(\t\022\021\n\twin_price\030\004 \001"
  "(\005\"\311\001\n\013TrackingLog\022*\n\010bid_info\030\001 \001(\0132\030.x"
  "n_adp.tracking.BidInfo\022\022\n\nevent_time\030\002 \001"
  "(\003\022\022\n\nevent_code\030\003 \001(\005\022\030\n\020event_extra_in"
  "fo\030\004 \001(\t\022\031\n\021client_event_time\030\005 \001(\003\022\030\n\020c"
  "lient_fill_time\030\006 \001(\003\022\027\n\017conv_event_code"
  "\030\007 \001(\005\"\222\001\n\014AdxBrokerLog\022(\n\003req\030\001 \001(\0132\033.x"
  "n_adp.tracking.BidRequest\022*\n\004resp\030\002 \001(\0132"
  "\034.xn_adp.tracking.BidResponse\022\016\n\006result\030"
  "\003 \001(\t\022\013\n\003dsp\030\004 \001(\005\022\017\n\007dsp_nbr\030\005 \001(\tB!\n\035c"
  "om.xiaoniuhy.adp.pb.trackingP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tracking_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tracking_2eproto_sccs[8] = {
  &scc_info_AdxBrokerLog_tracking_2eproto.base,
  &scc_info_BidInfo_tracking_2eproto.base,
  &scc_info_BidRequest_tracking_2eproto.base,
  &scc_info_BidResponse_tracking_2eproto.base,
  &scc_info_LocationInfo_tracking_2eproto.base,
  &scc_info_ThirdBidInfo_tracking_2eproto.base,
  &scc_info_TrackingLog_tracking_2eproto.base,
  &scc_info_XNBidInfo_tracking_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tracking_2eproto_once;
static bool descriptor_table_tracking_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tracking_2eproto = {
  &descriptor_table_tracking_2eproto_initialized, descriptor_table_protodef_tracking_2eproto, "tracking.proto", 1638,
  &descriptor_table_tracking_2eproto_once, descriptor_table_tracking_2eproto_sccs, descriptor_table_tracking_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_tracking_2eproto::offsets,
  file_level_metadata_tracking_2eproto, 8, file_level_enum_descriptors_tracking_2eproto, file_level_service_descriptors_tracking_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tracking_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tracking_2eproto), true);
namespace xn_adp {
namespace tracking {

// ===================================================================

void XNBidInfo::InitAsDefaultInstance() {
}
class XNBidInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XNBidInfo::kAdvidFieldNumber;
const int XNBidInfo::kCampidFieldNumber;
const int XNBidInfo::kPlanidFieldNumber;
const int XNBidInfo::kCrtidFieldNumber;
const int XNBidInfo::kBidtimeFieldNumber;
const int XNBidInfo::kBidtypeFieldNumber;
const int XNBidInfo::kFctypeFieldNumber;
const int XNBidInfo::kPctrFieldNumber;
const int XNBidInfo::kPcvrFieldNumber;
const int XNBidInfo::kAlgoTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XNBidInfo::XNBidInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.XNBidInfo)
}
XNBidInfo::XNBidInfo(const XNBidInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algo_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.algo_tag().size() > 0) {
    algo_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algo_tag_);
  }
  ::memcpy(&advid_, &from.advid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pcvr_) -
    reinterpret_cast<char*>(&advid_)) + sizeof(pcvr_));
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.XNBidInfo)
}

void XNBidInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XNBidInfo_tracking_2eproto.base);
  algo_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&advid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pcvr_) -
      reinterpret_cast<char*>(&advid_)) + sizeof(pcvr_));
}

XNBidInfo::~XNBidInfo() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.XNBidInfo)
  SharedDtor();
}

void XNBidInfo::SharedDtor() {
  algo_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void XNBidInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XNBidInfo& XNBidInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XNBidInfo_tracking_2eproto.base);
  return *internal_default_instance();
}


void XNBidInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.XNBidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algo_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&advid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pcvr_) -
      reinterpret_cast<char*>(&advid_)) + sizeof(pcvr_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XNBidInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 advid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          advid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 campid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          campid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 planid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          planid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 crtid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          crtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bidtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bidtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bidtype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bidtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fctype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pctr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pctr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pcvr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pcvr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string algo_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_algo_tag(), ptr, ctx, "xn_adp.tracking.XNBidInfo.algo_tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XNBidInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.XNBidInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 advid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &advid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 campid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 planid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &planid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 crtid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crtid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bidtime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bidtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bidtype = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fctype = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fctype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pctr = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pctr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pcvr = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcvr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string algo_tag = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_tag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->algo_tag().data(), static_cast<int>(this->algo_tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.XNBidInfo.algo_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.XNBidInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.XNBidInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XNBidInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.XNBidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 advid = 1;
  if (this->advid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->advid(), output);
  }

  // int32 campid = 2;
  if (this->campid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->campid(), output);
  }

  // int32 planid = 3;
  if (this->planid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->planid(), output);
  }

  // int32 crtid = 4;
  if (this->crtid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->crtid(), output);
  }

  // int64 bidtime = 5;
  if (this->bidtime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->bidtime(), output);
  }

  // int32 bidtype = 6;
  if (this->bidtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->bidtype(), output);
  }

  // int32 fctype = 7;
  if (this->fctype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->fctype(), output);
  }

  // int32 pctr = 8;
  if (this->pctr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->pctr(), output);
  }

  // int32 pcvr = 9;
  if (this->pcvr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->pcvr(), output);
  }

  // string algo_tag = 10;
  if (this->algo_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algo_tag().data(), static_cast<int>(this->algo_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.XNBidInfo.algo_tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->algo_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.XNBidInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* XNBidInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.XNBidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 advid = 1;
  if (this->advid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->advid(), target);
  }

  // int32 campid = 2;
  if (this->campid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->campid(), target);
  }

  // int32 planid = 3;
  if (this->planid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->planid(), target);
  }

  // int32 crtid = 4;
  if (this->crtid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->crtid(), target);
  }

  // int64 bidtime = 5;
  if (this->bidtime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->bidtime(), target);
  }

  // int32 bidtype = 6;
  if (this->bidtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->bidtype(), target);
  }

  // int32 fctype = 7;
  if (this->fctype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->fctype(), target);
  }

  // int32 pctr = 8;
  if (this->pctr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->pctr(), target);
  }

  // int32 pcvr = 9;
  if (this->pcvr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->pcvr(), target);
  }

  // string algo_tag = 10;
  if (this->algo_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algo_tag().data(), static_cast<int>(this->algo_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.XNBidInfo.algo_tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->algo_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.XNBidInfo)
  return target;
}

size_t XNBidInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.XNBidInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string algo_tag = 10;
  if (this->algo_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->algo_tag());
  }

  // int32 advid = 1;
  if (this->advid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->advid());
  }

  // int32 campid = 2;
  if (this->campid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->campid());
  }

  // int32 planid = 3;
  if (this->planid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->planid());
  }

  // int32 crtid = 4;
  if (this->crtid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->crtid());
  }

  // int64 bidtime = 5;
  if (this->bidtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bidtime());
  }

  // int32 bidtype = 6;
  if (this->bidtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bidtype());
  }

  // int32 fctype = 7;
  if (this->fctype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fctype());
  }

  // int32 pctr = 8;
  if (this->pctr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pctr());
  }

  // int32 pcvr = 9;
  if (this->pcvr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pcvr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XNBidInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.XNBidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const XNBidInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XNBidInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.XNBidInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.XNBidInfo)
    MergeFrom(*source);
  }
}

void XNBidInfo::MergeFrom(const XNBidInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.XNBidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algo_tag().size() > 0) {

    algo_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algo_tag_);
  }
  if (from.advid() != 0) {
    set_advid(from.advid());
  }
  if (from.campid() != 0) {
    set_campid(from.campid());
  }
  if (from.planid() != 0) {
    set_planid(from.planid());
  }
  if (from.crtid() != 0) {
    set_crtid(from.crtid());
  }
  if (from.bidtime() != 0) {
    set_bidtime(from.bidtime());
  }
  if (from.bidtype() != 0) {
    set_bidtype(from.bidtype());
  }
  if (from.fctype() != 0) {
    set_fctype(from.fctype());
  }
  if (from.pctr() != 0) {
    set_pctr(from.pctr());
  }
  if (from.pcvr() != 0) {
    set_pcvr(from.pcvr());
  }
}

void XNBidInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.XNBidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XNBidInfo::CopyFrom(const XNBidInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.XNBidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XNBidInfo::IsInitialized() const {
  return true;
}

void XNBidInfo::Swap(XNBidInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XNBidInfo::InternalSwap(XNBidInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  algo_tag_.Swap(&other->algo_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(advid_, other->advid_);
  swap(campid_, other->campid_);
  swap(planid_, other->planid_);
  swap(crtid_, other->crtid_);
  swap(bidtime_, other->bidtime_);
  swap(bidtype_, other->bidtype_);
  swap(fctype_, other->fctype_);
  swap(pctr_, other->pctr_);
  swap(pcvr_, other->pcvr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XNBidInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThirdBidInfo::InitAsDefaultInstance() {
}
class ThirdBidInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThirdBidInfo::kBidIdFieldNumber;
const int ThirdBidInfo::kCampIdFieldNumber;
const int ThirdBidInfo::kAdIdFieldNumber;
const int ThirdBidInfo::kCrtIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThirdBidInfo::ThirdBidInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.ThirdBidInfo)
}
ThirdBidInfo::ThirdBidInfo(const ThirdBidInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bid_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.bid_id().size() > 0) {
    bid_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bid_id_);
  }
  camp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.camp_id().size() > 0) {
    camp_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camp_id_);
  }
  ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ad_id().size() > 0) {
    ad_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ad_id_);
  }
  crt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.crt_id().size() > 0) {
    crt_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crt_id_);
  }
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.ThirdBidInfo)
}

void ThirdBidInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThirdBidInfo_tracking_2eproto.base);
  bid_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camp_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ThirdBidInfo::~ThirdBidInfo() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.ThirdBidInfo)
  SharedDtor();
}

void ThirdBidInfo::SharedDtor() {
  bid_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camp_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crt_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThirdBidInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThirdBidInfo& ThirdBidInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThirdBidInfo_tracking_2eproto.base);
  return *internal_default_instance();
}


void ThirdBidInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.ThirdBidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bid_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camp_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crt_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThirdBidInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bid_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bid_id(), ptr, ctx, "xn_adp.tracking.ThirdBidInfo.bid_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camp_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_camp_id(), ptr, ctx, "xn_adp.tracking.ThirdBidInfo.camp_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ad_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ad_id(), ptr, ctx, "xn_adp.tracking.ThirdBidInfo.ad_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string crt_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crt_id(), ptr, ctx, "xn_adp.tracking.ThirdBidInfo.crt_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThirdBidInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.ThirdBidInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bid_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bid_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bid_id().data(), static_cast<int>(this->bid_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.ThirdBidInfo.bid_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string camp_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_camp_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->camp_id().data(), static_cast<int>(this->camp_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.ThirdBidInfo.camp_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ad_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ad_id().data(), static_cast<int>(this->ad_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.ThirdBidInfo.ad_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string crt_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crt_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crt_id().data(), static_cast<int>(this->crt_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.ThirdBidInfo.crt_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.ThirdBidInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.ThirdBidInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThirdBidInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.ThirdBidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bid_id = 1;
  if (this->bid_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bid_id().data(), static_cast<int>(this->bid_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.bid_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bid_id(), output);
  }

  // string camp_id = 2;
  if (this->camp_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->camp_id().data(), static_cast<int>(this->camp_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.camp_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camp_id(), output);
  }

  // string ad_id = 3;
  if (this->ad_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ad_id().data(), static_cast<int>(this->ad_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.ad_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ad_id(), output);
  }

  // string crt_id = 4;
  if (this->crt_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crt_id().data(), static_cast<int>(this->crt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.crt_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->crt_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.ThirdBidInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ThirdBidInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.ThirdBidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bid_id = 1;
  if (this->bid_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bid_id().data(), static_cast<int>(this->bid_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.bid_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->bid_id(), target);
  }

  // string camp_id = 2;
  if (this->camp_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->camp_id().data(), static_cast<int>(this->camp_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.camp_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->camp_id(), target);
  }

  // string ad_id = 3;
  if (this->ad_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ad_id().data(), static_cast<int>(this->ad_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.ad_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ad_id(), target);
  }

  // string crt_id = 4;
  if (this->crt_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crt_id().data(), static_cast<int>(this->crt_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.ThirdBidInfo.crt_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->crt_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.ThirdBidInfo)
  return target;
}

size_t ThirdBidInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.ThirdBidInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bid_id = 1;
  if (this->bid_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bid_id());
  }

  // string camp_id = 2;
  if (this->camp_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->camp_id());
  }

  // string ad_id = 3;
  if (this->ad_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ad_id());
  }

  // string crt_id = 4;
  if (this->crt_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crt_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThirdBidInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.ThirdBidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ThirdBidInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThirdBidInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.ThirdBidInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.ThirdBidInfo)
    MergeFrom(*source);
  }
}

void ThirdBidInfo::MergeFrom(const ThirdBidInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.ThirdBidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bid_id().size() > 0) {

    bid_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bid_id_);
  }
  if (from.camp_id().size() > 0) {

    camp_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camp_id_);
  }
  if (from.ad_id().size() > 0) {

    ad_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ad_id_);
  }
  if (from.crt_id().size() > 0) {

    crt_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crt_id_);
  }
}

void ThirdBidInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.ThirdBidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThirdBidInfo::CopyFrom(const ThirdBidInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.ThirdBidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThirdBidInfo::IsInitialized() const {
  return true;
}

void ThirdBidInfo::Swap(ThirdBidInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThirdBidInfo::InternalSwap(ThirdBidInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bid_id_.Swap(&other->bid_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  camp_id_.Swap(&other->camp_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ad_id_.Swap(&other->ad_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crt_id_.Swap(&other->crt_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ThirdBidInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocationInfo::InitAsDefaultInstance() {
}
class LocationInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationInfo::kProvinceFieldNumber;
const int LocationInfo::kCityFieldNumber;
const int LocationInfo::kDistrictFieldNumber;
const int LocationInfo::kStreetFieldNumber;
const int LocationInfo::kStreetNumberFieldNumber;
const int LocationInfo::kAddressFieldNumber;
const int LocationInfo::kPoiNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationInfo::LocationInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.LocationInfo)
}
LocationInfo::LocationInfo(const LocationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  province_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.province().size() > 0) {
    province_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.city().size() > 0) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.district().size() > 0) {
    district_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.district_);
  }
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.street().size() > 0) {
    street_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
  street_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.street_number().size() > 0) {
    street_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_number_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  poi_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.poi_name().size() > 0) {
    poi_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poi_name_);
  }
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.LocationInfo)
}

void LocationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationInfo_tracking_2eproto.base);
  province_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poi_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LocationInfo::~LocationInfo() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.LocationInfo)
  SharedDtor();
}

void LocationInfo::SharedDtor() {
  province_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poi_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LocationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationInfo& LocationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationInfo_tracking_2eproto.base);
  return *internal_default_instance();
}


void LocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.LocationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  province_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  district_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poi_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string province = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_province(), ptr, ctx, "xn_adp.tracking.LocationInfo.province");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_city(), ptr, ctx, "xn_adp.tracking.LocationInfo.city");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string district = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_district(), ptr, ctx, "xn_adp.tracking.LocationInfo.district");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string street = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_street(), ptr, ctx, "xn_adp.tracking.LocationInfo.street");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string street_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_street_number(), ptr, ctx, "xn_adp.tracking.LocationInfo.street_number");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "xn_adp.tracking.LocationInfo.address");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string poi_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_poi_name(), ptr, ctx, "xn_adp.tracking.LocationInfo.poi_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocationInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.LocationInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string province = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->province().data(), static_cast<int>(this->province().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.LocationInfo.province"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string city = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->city().data(), static_cast<int>(this->city().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.LocationInfo.city"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string district = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_district()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->district().data(), static_cast<int>(this->district().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.LocationInfo.district"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string street = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->street().data(), static_cast<int>(this->street().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.LocationInfo.street"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string street_number = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_street_number()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->street_number().data(), static_cast<int>(this->street_number().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.LocationInfo.street_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.LocationInfo.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string poi_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_poi_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->poi_name().data(), static_cast<int>(this->poi_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.LocationInfo.poi_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.LocationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.LocationInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocationInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.LocationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string province = 1;
  if (this->province().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), static_cast<int>(this->province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.province");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->province(), output);
  }

  // string city = 2;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.city");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city(), output);
  }

  // string district = 3;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->district().data(), static_cast<int>(this->district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.district");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->district(), output);
  }

  // string street = 4;
  if (this->street().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->street().data(), static_cast<int>(this->street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.street");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->street(), output);
  }

  // string street_number = 5;
  if (this->street_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->street_number().data(), static_cast<int>(this->street_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.street_number");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->street_number(), output);
  }

  // string address = 6;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->address(), output);
  }

  // string poi_name = 7;
  if (this->poi_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->poi_name().data(), static_cast<int>(this->poi_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.poi_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->poi_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.LocationInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.LocationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string province = 1;
  if (this->province().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), static_cast<int>(this->province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.province");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->province(), target);
  }

  // string city = 2;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.city");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // string district = 3;
  if (this->district().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->district().data(), static_cast<int>(this->district().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.district");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->district(), target);
  }

  // string street = 4;
  if (this->street().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->street().data(), static_cast<int>(this->street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.street");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->street(), target);
  }

  // string street_number = 5;
  if (this->street_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->street_number().data(), static_cast<int>(this->street_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.street_number");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->street_number(), target);
  }

  // string address = 6;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->address(), target);
  }

  // string poi_name = 7;
  if (this->poi_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->poi_name().data(), static_cast<int>(this->poi_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.LocationInfo.poi_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->poi_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.LocationInfo)
  return target;
}

size_t LocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.LocationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string province = 1;
  if (this->province().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->province());
  }

  // string city = 2;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->city());
  }

  // string district = 3;
  if (this->district().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->district());
  }

  // string street = 4;
  if (this->street().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->street());
  }

  // string street_number = 5;
  if (this->street_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->street_number());
  }

  // string address = 6;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string poi_name = 7;
  if (this->poi_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->poi_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.LocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.LocationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.LocationInfo)
    MergeFrom(*source);
  }
}

void LocationInfo::MergeFrom(const LocationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.LocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.province().size() > 0) {

    province_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.district().size() > 0) {

    district_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.district_);
  }
  if (from.street().size() > 0) {

    street_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_);
  }
  if (from.street_number().size() > 0) {

    street_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.street_number_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.poi_name().size() > 0) {

    poi_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poi_name_);
  }
}

void LocationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.LocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationInfo::CopyFrom(const LocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.LocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationInfo::IsInitialized() const {
  return true;
}

void LocationInfo::Swap(LocationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationInfo::InternalSwap(LocationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  province_.Swap(&other->province_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  district_.Swap(&other->district_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  street_.Swap(&other->street_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  street_number_.Swap(&other->street_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  poi_name_.Swap(&other->poi_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BidRequest::InitAsDefaultInstance() {
  ::xn_adp::tracking::_BidRequest_default_instance_._instance.get_mutable()->location_ = const_cast< ::xn_adp::tracking::LocationInfo*>(
      ::xn_adp::tracking::LocationInfo::internal_default_instance());
}
class BidRequest::HasBitSetters {
 public:
  static const ::xn_adp::tracking::LocationInfo& location(const BidRequest* msg);
};

const ::xn_adp::tracking::LocationInfo&
BidRequest::HasBitSetters::location(const BidRequest* msg) {
  return *msg->location_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest::kReqIdFieldNumber;
const int BidRequest::kReqTimeFieldNumber;
const int BidRequest::kPubIdFieldNumber;
const int BidRequest::kAppIdFieldNumber;
const int BidRequest::kPlacementIdFieldNumber;
const int BidRequest::kImpTypeFieldNumber;
const int BidRequest::kWFieldNumber;
const int BidRequest::kHFieldNumber;
const int BidRequest::kSdkvFieldNumber;
const int BidRequest::kOsFieldNumber;
const int BidRequest::kOsvFieldNumber;
const int BidRequest::kBrandFieldNumber;
const int BidRequest::kModelFieldNumber;
const int BidRequest::kConnFieldNumber;
const int BidRequest::kDevtypeFieldNumber;
const int BidRequest::kOperatorFieldNumber;
const int BidRequest::kImeiFieldNumber;
const int BidRequest::kOaidFieldNumber;
const int BidRequest::kAndroidIdFieldNumber;
const int BidRequest::kIdfaFieldNumber;
const int BidRequest::kIdfvFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kLatFieldNumber;
const int BidRequest::kLonFieldNumber;
const int BidRequest::kCarrierFieldNumber;
const int BidRequest::kAppVerFieldNumber;
const int BidRequest::kOrientationFieldNumber;
const int BidRequest::kPpiFieldNumber;
const int BidRequest::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest::BidRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.BidRequest)
}
BidRequest::BidRequest(const BidRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdkv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sdkv().size() > 0) {
    sdkv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdkv_);
  }
  osv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.osv().size() > 0) {
    osv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.osv_);
  }
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.brand().size() > 0) {
    brand_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.operator_().size() > 0) {
    operator__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operator__);
  }
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.imei().size() > 0) {
    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  oaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.oaid().size() > 0) {
    oaid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oaid_);
  }
  android_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.android_id().size() > 0) {
    android_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.android_id_);
  }
  idfa_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.idfa().size() > 0) {
    idfa_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idfa_);
  }
  idfv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.idfv().size() > 0) {
    idfv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idfv_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  app_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.app_ver().size() > 0) {
    app_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_ver_);
  }
  if (from.has_location()) {
    location_ = new ::xn_adp::tracking::LocationInfo(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&req_id_, &from.req_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ppi_) -
    reinterpret_cast<char*>(&req_id_)) + sizeof(ppi_));
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.BidRequest)
}

void BidRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BidRequest_tracking_2eproto.base);
  sdkv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  android_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfa_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ppi_) -
      reinterpret_cast<char*>(&location_)) + sizeof(ppi_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  sdkv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  android_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfa_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void BidRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BidRequest& BidRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BidRequest_tracking_2eproto.base);
  return *internal_default_instance();
}


void BidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.BidRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdkv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oaid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  android_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfa_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfv_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&req_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ppi_) -
      reinterpret_cast<char*>(&req_id_)) + sizeof(ppi_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BidRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 req_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          req_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 req_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          req_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pub_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pub_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 placement_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          placement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 imp_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          imp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 w = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdkv = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sdkv(), ptr, ctx, "xn_adp.tracking.BidRequest.sdkv");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 os = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          os_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string osv = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_osv(), ptr, ctx, "xn_adp.tracking.BidRequest.osv");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brand = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_brand(), ptr, ctx, "xn_adp.tracking.BidRequest.brand");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model(), ptr, ctx, "xn_adp.tracking.BidRequest.model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 conn = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          conn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 devtype = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          devtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_operator_(), ptr, ctx, "xn_adp.tracking.BidRequest.operator");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imei = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_imei(), ptr, ctx, "xn_adp.tracking.BidRequest.imei");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oaid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_oaid(), ptr, ctx, "xn_adp.tracking.BidRequest.oaid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string android_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_android_id(), ptr, ctx, "xn_adp.tracking.BidRequest.android_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idfa = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_idfa(), ptr, ctx, "xn_adp.tracking.BidRequest.idfa");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idfv = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_idfv(), ptr, ctx, "xn_adp.tracking.BidRequest.idfv");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "xn_adp.tracking.BidRequest.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lat = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lon = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 carrier = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          carrier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_ver = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_app_ver(), ptr, ctx, "xn_adp.tracking.BidRequest.app_ver");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 orientation = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ppi = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ppi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xn_adp.tracking.LocationInfo location = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BidRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.BidRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 req_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 req_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pub_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pub_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 app_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 placement_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &placement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 imp_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &imp_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 w = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 h = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sdkv = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sdkv()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sdkv().data(), static_cast<int>(this->sdkv().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.sdkv"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 os = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string osv = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->osv().data(), static_cast<int>(this->osv().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.osv"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string brand = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->brand().data(), static_cast<int>(this->brand().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.brand"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), static_cast<int>(this->model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conn = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &conn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 devtype = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &devtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operator = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->operator_().data(), static_cast<int>(this->operator_().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.operator"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string imei = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->imei().data(), static_cast<int>(this->imei().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.imei"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oaid = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_oaid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->oaid().data(), static_cast<int>(this->oaid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.oaid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string android_id = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_android_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->android_id().data(), static_cast<int>(this->android_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.android_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string idfa = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->idfa().data(), static_cast<int>(this->idfa().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.idfa"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string idfv = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_idfv()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->idfv().data(), static_cast<int>(this->idfv().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.idfv"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (197 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lon = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (205 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 carrier = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &carrier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_ver = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_app_ver()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->app_ver().data(), static_cast<int>(this->app_ver().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidRequest.app_ver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 orientation = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ppi = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xn_adp.tracking.LocationInfo location = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.BidRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BidRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.BidRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 req_id = 1;
  if (this->req_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->req_id(), output);
  }

  // int64 req_time = 2;
  if (this->req_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->req_time(), output);
  }

  // int32 pub_id = 3;
  if (this->pub_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->pub_id(), output);
  }

  // int32 app_id = 4;
  if (this->app_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->app_id(), output);
  }

  // int32 placement_id = 5;
  if (this->placement_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->placement_id(), output);
  }

  // int32 imp_type = 6;
  if (this->imp_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->imp_type(), output);
  }

  // int32 w = 7;
  if (this->w() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->w(), output);
  }

  // int32 h = 8;
  if (this->h() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->h(), output);
  }

  // string sdkv = 10;
  if (this->sdkv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sdkv().data(), static_cast<int>(this->sdkv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.sdkv");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sdkv(), output);
  }

  // int32 os = 11;
  if (this->os() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->os(), output);
  }

  // string osv = 12;
  if (this->osv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->osv().data(), static_cast<int>(this->osv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.osv");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->osv(), output);
  }

  // string brand = 13;
  if (this->brand().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), static_cast<int>(this->brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.brand");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->brand(), output);
  }

  // string model = 14;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->model(), output);
  }

  // int32 conn = 15;
  if (this->conn() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->conn(), output);
  }

  // int32 devtype = 16;
  if (this->devtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->devtype(), output);
  }

  // string operator = 17;
  if (this->operator_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operator_().data(), static_cast<int>(this->operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.operator");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->operator_(), output);
  }

  // string imei = 18;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->imei().data(), static_cast<int>(this->imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.imei");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->imei(), output);
  }

  // string oaid = 19;
  if (this->oaid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->oaid().data(), static_cast<int>(this->oaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.oaid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->oaid(), output);
  }

  // string android_id = 20;
  if (this->android_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->android_id().data(), static_cast<int>(this->android_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.android_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->android_id(), output);
  }

  // string idfa = 21;
  if (this->idfa().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idfa().data(), static_cast<int>(this->idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.idfa");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->idfa(), output);
  }

  // string idfv = 22;
  if (this->idfv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idfv().data(), static_cast<int>(this->idfv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.idfv");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->idfv(), output);
  }

  // string ip = 23;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->ip(), output);
  }

  // float lat = 24;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(24, this->lat(), output);
  }

  // float lon = 25;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(25, this->lon(), output);
  }

  // int32 carrier = 26;
  if (this->carrier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->carrier(), output);
  }

  // string app_ver = 27;
  if (this->app_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->app_ver().data(), static_cast<int>(this->app_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.app_ver");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->app_ver(), output);
  }

  // int32 orientation = 28;
  if (this->orientation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(28, this->orientation(), output);
  }

  // int32 ppi = 29;
  if (this->ppi() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(29, this->ppi(), output);
  }

  // .xn_adp.tracking.LocationInfo location = 36;
  if (this->has_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, HasBitSetters::location(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.BidRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BidRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.BidRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->req_id(), target);
  }

  // int64 req_time = 2;
  if (this->req_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->req_time(), target);
  }

  // int32 pub_id = 3;
  if (this->pub_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->pub_id(), target);
  }

  // int32 app_id = 4;
  if (this->app_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->app_id(), target);
  }

  // int32 placement_id = 5;
  if (this->placement_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->placement_id(), target);
  }

  // int32 imp_type = 6;
  if (this->imp_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->imp_type(), target);
  }

  // int32 w = 7;
  if (this->w() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->w(), target);
  }

  // int32 h = 8;
  if (this->h() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->h(), target);
  }

  // string sdkv = 10;
  if (this->sdkv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sdkv().data(), static_cast<int>(this->sdkv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.sdkv");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->sdkv(), target);
  }

  // int32 os = 11;
  if (this->os() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->os(), target);
  }

  // string osv = 12;
  if (this->osv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->osv().data(), static_cast<int>(this->osv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.osv");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->osv(), target);
  }

  // string brand = 13;
  if (this->brand().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->brand().data(), static_cast<int>(this->brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.brand");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->brand(), target);
  }

  // string model = 14;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), static_cast<int>(this->model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->model(), target);
  }

  // int32 conn = 15;
  if (this->conn() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->conn(), target);
  }

  // int32 devtype = 16;
  if (this->devtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->devtype(), target);
  }

  // string operator = 17;
  if (this->operator_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operator_().data(), static_cast<int>(this->operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.operator");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->operator_(), target);
  }

  // string imei = 18;
  if (this->imei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->imei().data(), static_cast<int>(this->imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.imei");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->imei(), target);
  }

  // string oaid = 19;
  if (this->oaid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->oaid().data(), static_cast<int>(this->oaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.oaid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        19, this->oaid(), target);
  }

  // string android_id = 20;
  if (this->android_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->android_id().data(), static_cast<int>(this->android_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.android_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->android_id(), target);
  }

  // string idfa = 21;
  if (this->idfa().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idfa().data(), static_cast<int>(this->idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.idfa");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        21, this->idfa(), target);
  }

  // string idfv = 22;
  if (this->idfv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->idfv().data(), static_cast<int>(this->idfv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.idfv");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        22, this->idfv(), target);
  }

  // string ip = 23;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->ip(), target);
  }

  // float lat = 24;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->lat(), target);
  }

  // float lon = 25;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->lon(), target);
  }

  // int32 carrier = 26;
  if (this->carrier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->carrier(), target);
  }

  // string app_ver = 27;
  if (this->app_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->app_ver().data(), static_cast<int>(this->app_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidRequest.app_ver");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        27, this->app_ver(), target);
  }

  // int32 orientation = 28;
  if (this->orientation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->orientation(), target);
  }

  // int32 ppi = 29;
  if (this->ppi() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->ppi(), target);
  }

  // .xn_adp.tracking.LocationInfo location = 36;
  if (this->has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, HasBitSetters::location(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.BidRequest)
  return target;
}

size_t BidRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.BidRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdkv = 10;
  if (this->sdkv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sdkv());
  }

  // string osv = 12;
  if (this->osv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->osv());
  }

  // string brand = 13;
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->brand());
  }

  // string model = 14;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model());
  }

  // string operator = 17;
  if (this->operator_().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->operator_());
  }

  // string imei = 18;
  if (this->imei().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->imei());
  }

  // string oaid = 19;
  if (this->oaid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->oaid());
  }

  // string android_id = 20;
  if (this->android_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->android_id());
  }

  // string idfa = 21;
  if (this->idfa().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->idfa());
  }

  // string idfv = 22;
  if (this->idfv().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->idfv());
  }

  // string ip = 23;
  if (this->ip().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string app_ver = 27;
  if (this->app_ver().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->app_ver());
  }

  // .xn_adp.tracking.LocationInfo location = 36;
  if (this->has_location()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->req_id());
  }

  // int64 req_time = 2;
  if (this->req_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->req_time());
  }

  // int32 pub_id = 3;
  if (this->pub_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pub_id());
  }

  // int32 app_id = 4;
  if (this->app_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->app_id());
  }

  // int32 placement_id = 5;
  if (this->placement_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->placement_id());
  }

  // int32 imp_type = 6;
  if (this->imp_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->imp_type());
  }

  // int32 w = 7;
  if (this->w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->w());
  }

  // int32 h = 8;
  if (this->h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->h());
  }

  // int32 os = 11;
  if (this->os() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->os());
  }

  // int32 conn = 15;
  if (this->conn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->conn());
  }

  // int32 devtype = 16;
  if (this->devtype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->devtype());
  }

  // float lat = 24;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 2 + 4;
  }

  // float lon = 25;
  if (!(this->lon() <= 0 && this->lon() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 carrier = 26;
  if (this->carrier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->carrier());
  }

  // int32 orientation = 28;
  if (this->orientation() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->orientation());
  }

  // int32 ppi = 29;
  if (this->ppi() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ppi());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BidRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.BidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BidRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BidRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.BidRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.BidRequest)
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.BidRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sdkv().size() > 0) {

    sdkv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdkv_);
  }
  if (from.osv().size() > 0) {

    osv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.osv_);
  }
  if (from.brand().size() > 0) {

    brand_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.brand_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.operator_().size() > 0) {

    operator__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operator__);
  }
  if (from.imei().size() > 0) {

    imei_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  if (from.oaid().size() > 0) {

    oaid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oaid_);
  }
  if (from.android_id().size() > 0) {

    android_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.android_id_);
  }
  if (from.idfa().size() > 0) {

    idfa_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idfa_);
  }
  if (from.idfv().size() > 0) {

    idfv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.idfv_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.app_ver().size() > 0) {

    app_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_ver_);
  }
  if (from.has_location()) {
    mutable_location()->::xn_adp::tracking::LocationInfo::MergeFrom(from.location());
  }
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.req_time() != 0) {
    set_req_time(from.req_time());
  }
  if (from.pub_id() != 0) {
    set_pub_id(from.pub_id());
  }
  if (from.app_id() != 0) {
    set_app_id(from.app_id());
  }
  if (from.placement_id() != 0) {
    set_placement_id(from.placement_id());
  }
  if (from.imp_type() != 0) {
    set_imp_type(from.imp_type());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
  if (from.os() != 0) {
    set_os(from.os());
  }
  if (from.conn() != 0) {
    set_conn(from.conn());
  }
  if (from.devtype() != 0) {
    set_devtype(from.devtype());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    set_lat(from.lat());
  }
  if (!(from.lon() <= 0 && from.lon() >= 0)) {
    set_lon(from.lon());
  }
  if (from.carrier() != 0) {
    set_carrier(from.carrier());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
  if (from.ppi() != 0) {
    set_ppi(from.ppi());
  }
}

void BidRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest::InternalSwap(BidRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sdkv_.Swap(&other->sdkv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  osv_.Swap(&other->osv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  brand_.Swap(&other->brand_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  operator__.Swap(&other->operator__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imei_.Swap(&other->imei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oaid_.Swap(&other->oaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  android_id_.Swap(&other->android_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  idfa_.Swap(&other->idfa_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  idfv_.Swap(&other->idfv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_ver_.Swap(&other->app_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(req_id_, other->req_id_);
  swap(req_time_, other->req_time_);
  swap(pub_id_, other->pub_id_);
  swap(app_id_, other->app_id_);
  swap(placement_id_, other->placement_id_);
  swap(imp_type_, other->imp_type_);
  swap(w_, other->w_);
  swap(h_, other->h_);
  swap(os_, other->os_);
  swap(conn_, other->conn_);
  swap(devtype_, other->devtype_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(carrier_, other->carrier_);
  swap(orientation_, other->orientation_);
  swap(ppi_, other->ppi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BidRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BidResponse::InitAsDefaultInstance() {
  ::xn_adp::tracking::_BidResponse_default_instance_._instance.get_mutable()->xn_bi_ = const_cast< ::xn_adp::tracking::XNBidInfo*>(
      ::xn_adp::tracking::XNBidInfo::internal_default_instance());
  ::xn_adp::tracking::_BidResponse_default_instance_._instance.get_mutable()->third_bi_ = const_cast< ::xn_adp::tracking::ThirdBidInfo*>(
      ::xn_adp::tracking::ThirdBidInfo::internal_default_instance());
}
class BidResponse::HasBitSetters {
 public:
  static const ::xn_adp::tracking::XNBidInfo& xn_bi(const BidResponse* msg);
  static const ::xn_adp::tracking::ThirdBidInfo& third_bi(const BidResponse* msg);
};

const ::xn_adp::tracking::XNBidInfo&
BidResponse::HasBitSetters::xn_bi(const BidResponse* msg) {
  return *msg->xn_bi_;
}
const ::xn_adp::tracking::ThirdBidInfo&
BidResponse::HasBitSetters::third_bi(const BidResponse* msg) {
  return *msg->third_bi_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse::kDspFieldNumber;
const int BidResponse::kPriceFieldNumber;
const int BidResponse::kActionTypeFieldNumber;
const int BidResponse::kCrtSizeFieldNumber;
const int BidResponse::kAdPkgFieldNumber;
const int BidResponse::kXnBiFieldNumber;
const int BidResponse::kThirdBiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse::BidResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.BidResponse)
}
BidResponse::BidResponse(const BidResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crt_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.crt_size().size() > 0) {
    crt_size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crt_size_);
  }
  ad_pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ad_pkg().size() > 0) {
    ad_pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ad_pkg_);
  }
  if (from.has_xn_bi()) {
    xn_bi_ = new ::xn_adp::tracking::XNBidInfo(*from.xn_bi_);
  } else {
    xn_bi_ = nullptr;
  }
  if (from.has_third_bi()) {
    third_bi_ = new ::xn_adp::tracking::ThirdBidInfo(*from.third_bi_);
  } else {
    third_bi_ = nullptr;
  }
  ::memcpy(&dsp_, &from.dsp_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&dsp_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.BidResponse)
}

void BidResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BidResponse_tracking_2eproto.base);
  crt_size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&xn_bi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&xn_bi_)) + sizeof(action_type_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  crt_size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_pkg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete xn_bi_;
  if (this != internal_default_instance()) delete third_bi_;
}

void BidResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BidResponse& BidResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BidResponse_tracking_2eproto.base);
  return *internal_default_instance();
}


void BidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.BidResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crt_size_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_pkg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && xn_bi_ != nullptr) {
    delete xn_bi_;
  }
  xn_bi_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && third_bi_ != nullptr) {
    delete third_bi_;
  }
  third_bi_ = nullptr;
  ::memset(&dsp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&dsp_)) + sizeof(action_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BidResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dsp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dsp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string crt_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_crt_size(), ptr, ctx, "xn_adp.tracking.BidResponse.crt_size");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ad_pkg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ad_pkg(), ptr, ctx, "xn_adp.tracking.BidResponse.ad_pkg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xn_adp.tracking.XNBidInfo xn_bi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_xn_bi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xn_adp.tracking.ThirdBidInfo third_bi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_third_bi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BidResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.BidResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dsp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dsp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 price = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string crt_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_crt_size()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->crt_size().data(), static_cast<int>(this->crt_size().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidResponse.crt_size"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ad_pkg = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_pkg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ad_pkg().data(), static_cast<int>(this->ad_pkg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidResponse.ad_pkg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xn_adp.tracking.XNBidInfo xn_bi = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_xn_bi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xn_adp.tracking.ThirdBidInfo third_bi = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_third_bi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.BidResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BidResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.BidResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dsp = 1;
  if (this->dsp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->dsp(), output);
  }

  // int32 price = 2;
  if (this->price() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // int32 action_type = 3;
  if (this->action_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->action_type(), output);
  }

  // string crt_size = 4;
  if (this->crt_size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crt_size().data(), static_cast<int>(this->crt_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidResponse.crt_size");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->crt_size(), output);
  }

  // string ad_pkg = 5;
  if (this->ad_pkg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ad_pkg().data(), static_cast<int>(this->ad_pkg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidResponse.ad_pkg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ad_pkg(), output);
  }

  // .xn_adp.tracking.XNBidInfo xn_bi = 6;
  if (this->has_xn_bi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::xn_bi(this), output);
  }

  // .xn_adp.tracking.ThirdBidInfo third_bi = 7;
  if (this->has_third_bi()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::third_bi(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.BidResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BidResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.BidResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dsp = 1;
  if (this->dsp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->dsp(), target);
  }

  // int32 price = 2;
  if (this->price() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // int32 action_type = 3;
  if (this->action_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->action_type(), target);
  }

  // string crt_size = 4;
  if (this->crt_size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->crt_size().data(), static_cast<int>(this->crt_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidResponse.crt_size");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->crt_size(), target);
  }

  // string ad_pkg = 5;
  if (this->ad_pkg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ad_pkg().data(), static_cast<int>(this->ad_pkg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidResponse.ad_pkg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->ad_pkg(), target);
  }

  // .xn_adp.tracking.XNBidInfo xn_bi = 6;
  if (this->has_xn_bi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::xn_bi(this), target);
  }

  // .xn_adp.tracking.ThirdBidInfo third_bi = 7;
  if (this->has_third_bi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::third_bi(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.BidResponse)
  return target;
}

size_t BidResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.BidResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string crt_size = 4;
  if (this->crt_size().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->crt_size());
  }

  // string ad_pkg = 5;
  if (this->ad_pkg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ad_pkg());
  }

  // .xn_adp.tracking.XNBidInfo xn_bi = 6;
  if (this->has_xn_bi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *xn_bi_);
  }

  // .xn_adp.tracking.ThirdBidInfo third_bi = 7;
  if (this->has_third_bi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *third_bi_);
  }

  // int32 dsp = 1;
  if (this->dsp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dsp());
  }

  // int32 price = 2;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->price());
  }

  // int32 action_type = 3;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->action_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BidResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.BidResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BidResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BidResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.BidResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.BidResponse)
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.BidResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.crt_size().size() > 0) {

    crt_size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crt_size_);
  }
  if (from.ad_pkg().size() > 0) {

    ad_pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ad_pkg_);
  }
  if (from.has_xn_bi()) {
    mutable_xn_bi()->::xn_adp::tracking::XNBidInfo::MergeFrom(from.xn_bi());
  }
  if (from.has_third_bi()) {
    mutable_third_bi()->::xn_adp::tracking::ThirdBidInfo::MergeFrom(from.third_bi());
  }
  if (from.dsp() != 0) {
    set_dsp(from.dsp());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
}

void BidResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse::InternalSwap(BidResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  crt_size_.Swap(&other->crt_size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ad_pkg_.Swap(&other->ad_pkg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(xn_bi_, other->xn_bi_);
  swap(third_bi_, other->third_bi_);
  swap(dsp_, other->dsp_);
  swap(price_, other->price_);
  swap(action_type_, other->action_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BidResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BidInfo::InitAsDefaultInstance() {
  ::xn_adp::tracking::_BidInfo_default_instance_._instance.get_mutable()->req_ = const_cast< ::xn_adp::tracking::BidRequest*>(
      ::xn_adp::tracking::BidRequest::internal_default_instance());
  ::xn_adp::tracking::_BidInfo_default_instance_._instance.get_mutable()->resp_ = const_cast< ::xn_adp::tracking::BidResponse*>(
      ::xn_adp::tracking::BidResponse::internal_default_instance());
}
class BidInfo::HasBitSetters {
 public:
  static const ::xn_adp::tracking::BidRequest& req(const BidInfo* msg);
  static const ::xn_adp::tracking::BidResponse& resp(const BidInfo* msg);
};

const ::xn_adp::tracking::BidRequest&
BidInfo::HasBitSetters::req(const BidInfo* msg) {
  return *msg->req_;
}
const ::xn_adp::tracking::BidResponse&
BidInfo::HasBitSetters::resp(const BidInfo* msg) {
  return *msg->resp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidInfo::kReqFieldNumber;
const int BidInfo::kRespFieldNumber;
const int BidInfo::kResultFieldNumber;
const int BidInfo::kWinPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidInfo::BidInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.BidInfo)
}
BidInfo::BidInfo(const BidInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_req()) {
    req_ = new ::xn_adp::tracking::BidRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from.has_resp()) {
    resp_ = new ::xn_adp::tracking::BidResponse(*from.resp_);
  } else {
    resp_ = nullptr;
  }
  win_price_ = from.win_price_;
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.BidInfo)
}

void BidInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BidInfo_tracking_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&win_price_) -
      reinterpret_cast<char*>(&req_)) + sizeof(win_price_));
}

BidInfo::~BidInfo() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.BidInfo)
  SharedDtor();
}

void BidInfo::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void BidInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BidInfo& BidInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BidInfo_tracking_2eproto.base);
  return *internal_default_instance();
}


void BidInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.BidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resp_ != nullptr) {
    delete resp_;
  }
  resp_ = nullptr;
  win_price_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BidInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xn_adp.tracking.BidRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xn_adp.tracking.BidResponse resp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_resp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "xn_adp.tracking.BidInfo.result");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          win_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BidInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.BidInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xn_adp.tracking.BidRequest req = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xn_adp.tracking.BidResponse resp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.BidInfo.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 win_price = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.BidInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.BidInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BidInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.BidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xn_adp.tracking.BidRequest req = 1;
  if (this->has_req()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::req(this), output);
  }

  // .xn_adp.tracking.BidResponse resp = 2;
  if (this->has_resp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::resp(this), output);
  }

  // string result = 3;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidInfo.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result(), output);
  }

  // int32 win_price = 4;
  if (this->win_price() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->win_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.BidInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* BidInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.BidInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xn_adp.tracking.BidRequest req = 1;
  if (this->has_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::req(this), target);
  }

  // .xn_adp.tracking.BidResponse resp = 2;
  if (this->has_resp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::resp(this), target);
  }

  // string result = 3;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.BidInfo.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->result(), target);
  }

  // int32 win_price = 4;
  if (this->win_price() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->win_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.BidInfo)
  return target;
}

size_t BidInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.BidInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // .xn_adp.tracking.BidRequest req = 1;
  if (this->has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .xn_adp.tracking.BidResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resp_);
  }

  // int32 win_price = 4;
  if (this->win_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->win_price());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BidInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.BidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BidInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BidInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.BidInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.BidInfo)
    MergeFrom(*source);
  }
}

void BidInfo::MergeFrom(const BidInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.BidInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.has_req()) {
    mutable_req()->::xn_adp::tracking::BidRequest::MergeFrom(from.req());
  }
  if (from.has_resp()) {
    mutable_resp()->::xn_adp::tracking::BidResponse::MergeFrom(from.resp());
  }
  if (from.win_price() != 0) {
    set_win_price(from.win_price());
  }
}

void BidInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.BidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidInfo::CopyFrom(const BidInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.BidInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidInfo::IsInitialized() const {
  return true;
}

void BidInfo::Swap(BidInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidInfo::InternalSwap(BidInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(win_price_, other->win_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BidInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackingLog::InitAsDefaultInstance() {
  ::xn_adp::tracking::_TrackingLog_default_instance_._instance.get_mutable()->bid_info_ = const_cast< ::xn_adp::tracking::BidInfo*>(
      ::xn_adp::tracking::BidInfo::internal_default_instance());
}
class TrackingLog::HasBitSetters {
 public:
  static const ::xn_adp::tracking::BidInfo& bid_info(const TrackingLog* msg);
};

const ::xn_adp::tracking::BidInfo&
TrackingLog::HasBitSetters::bid_info(const TrackingLog* msg) {
  return *msg->bid_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingLog::kBidInfoFieldNumber;
const int TrackingLog::kEventTimeFieldNumber;
const int TrackingLog::kEventCodeFieldNumber;
const int TrackingLog::kEventExtraInfoFieldNumber;
const int TrackingLog::kClientEventTimeFieldNumber;
const int TrackingLog::kClientFillTimeFieldNumber;
const int TrackingLog::kConvEventCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingLog::TrackingLog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.TrackingLog)
}
TrackingLog::TrackingLog(const TrackingLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.event_extra_info().size() > 0) {
    event_extra_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_extra_info_);
  }
  if (from.has_bid_info()) {
    bid_info_ = new ::xn_adp::tracking::BidInfo(*from.bid_info_);
  } else {
    bid_info_ = nullptr;
  }
  ::memcpy(&event_time_, &from.event_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_fill_time_) -
    reinterpret_cast<char*>(&event_time_)) + sizeof(client_fill_time_));
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.TrackingLog)
}

void TrackingLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackingLog_tracking_2eproto.base);
  event_extra_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bid_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_fill_time_) -
      reinterpret_cast<char*>(&bid_info_)) + sizeof(client_fill_time_));
}

TrackingLog::~TrackingLog() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.TrackingLog)
  SharedDtor();
}

void TrackingLog::SharedDtor() {
  event_extra_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bid_info_;
}

void TrackingLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackingLog& TrackingLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackingLog_tracking_2eproto.base);
  return *internal_default_instance();
}


void TrackingLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.TrackingLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_extra_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bid_info_ != nullptr) {
    delete bid_info_;
  }
  bid_info_ = nullptr;
  ::memset(&event_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_fill_time_) -
      reinterpret_cast<char*>(&event_time_)) + sizeof(client_fill_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrackingLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xn_adp.tracking.BidInfo bid_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_bid_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 event_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          event_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 event_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          event_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event_extra_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_event_extra_info(), ptr, ctx, "xn_adp.tracking.TrackingLog.event_extra_info");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_event_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          client_event_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_fill_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          client_fill_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 conv_event_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          conv_event_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrackingLog::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.TrackingLog)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xn_adp.tracking.BidInfo bid_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bid_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 event_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string event_extra_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_extra_info()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->event_extra_info().data(), static_cast<int>(this->event_extra_info().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.TrackingLog.event_extra_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 client_event_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 client_fill_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_fill_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conv_event_code = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &conv_event_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.TrackingLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.TrackingLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrackingLog::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.TrackingLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xn_adp.tracking.BidInfo bid_info = 1;
  if (this->has_bid_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::bid_info(this), output);
  }

  // int64 event_time = 2;
  if (this->event_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->event_time(), output);
  }

  // int32 event_code = 3;
  if (this->event_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->event_code(), output);
  }

  // string event_extra_info = 4;
  if (this->event_extra_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->event_extra_info().data(), static_cast<int>(this->event_extra_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.TrackingLog.event_extra_info");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->event_extra_info(), output);
  }

  // int64 client_event_time = 5;
  if (this->client_event_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->client_event_time(), output);
  }

  // int64 client_fill_time = 6;
  if (this->client_fill_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->client_fill_time(), output);
  }

  // int32 conv_event_code = 7;
  if (this->conv_event_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->conv_event_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.TrackingLog)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackingLog::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.TrackingLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xn_adp.tracking.BidInfo bid_info = 1;
  if (this->has_bid_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::bid_info(this), target);
  }

  // int64 event_time = 2;
  if (this->event_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->event_time(), target);
  }

  // int32 event_code = 3;
  if (this->event_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->event_code(), target);
  }

  // string event_extra_info = 4;
  if (this->event_extra_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->event_extra_info().data(), static_cast<int>(this->event_extra_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.TrackingLog.event_extra_info");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->event_extra_info(), target);
  }

  // int64 client_event_time = 5;
  if (this->client_event_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->client_event_time(), target);
  }

  // int64 client_fill_time = 6;
  if (this->client_fill_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->client_fill_time(), target);
  }

  // int32 conv_event_code = 7;
  if (this->conv_event_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->conv_event_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.TrackingLog)
  return target;
}

size_t TrackingLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.TrackingLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_extra_info = 4;
  if (this->event_extra_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->event_extra_info());
  }

  // .xn_adp.tracking.BidInfo bid_info = 1;
  if (this->has_bid_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bid_info_);
  }

  // int64 event_time = 2;
  if (this->event_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->event_time());
  }

  // int64 client_event_time = 5;
  if (this->client_event_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->client_event_time());
  }

  // int32 event_code = 3;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->event_code());
  }

  // int32 conv_event_code = 7;
  if (this->conv_event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->conv_event_code());
  }

  // int64 client_fill_time = 6;
  if (this->client_fill_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->client_fill_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.TrackingLog)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackingLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.TrackingLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.TrackingLog)
    MergeFrom(*source);
  }
}

void TrackingLog::MergeFrom(const TrackingLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.TrackingLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_extra_info().size() > 0) {

    event_extra_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_extra_info_);
  }
  if (from.has_bid_info()) {
    mutable_bid_info()->::xn_adp::tracking::BidInfo::MergeFrom(from.bid_info());
  }
  if (from.event_time() != 0) {
    set_event_time(from.event_time());
  }
  if (from.client_event_time() != 0) {
    set_client_event_time(from.client_event_time());
  }
  if (from.event_code() != 0) {
    set_event_code(from.event_code());
  }
  if (from.conv_event_code() != 0) {
    set_conv_event_code(from.conv_event_code());
  }
  if (from.client_fill_time() != 0) {
    set_client_fill_time(from.client_fill_time());
  }
}

void TrackingLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.TrackingLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingLog::CopyFrom(const TrackingLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.TrackingLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingLog::IsInitialized() const {
  return true;
}

void TrackingLog::Swap(TrackingLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingLog::InternalSwap(TrackingLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_extra_info_.Swap(&other->event_extra_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bid_info_, other->bid_info_);
  swap(event_time_, other->event_time_);
  swap(client_event_time_, other->client_event_time_);
  swap(event_code_, other->event_code_);
  swap(conv_event_code_, other->conv_event_code_);
  swap(client_fill_time_, other->client_fill_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackingLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdxBrokerLog::InitAsDefaultInstance() {
  ::xn_adp::tracking::_AdxBrokerLog_default_instance_._instance.get_mutable()->req_ = const_cast< ::xn_adp::tracking::BidRequest*>(
      ::xn_adp::tracking::BidRequest::internal_default_instance());
  ::xn_adp::tracking::_AdxBrokerLog_default_instance_._instance.get_mutable()->resp_ = const_cast< ::xn_adp::tracking::BidResponse*>(
      ::xn_adp::tracking::BidResponse::internal_default_instance());
}
class AdxBrokerLog::HasBitSetters {
 public:
  static const ::xn_adp::tracking::BidRequest& req(const AdxBrokerLog* msg);
  static const ::xn_adp::tracking::BidResponse& resp(const AdxBrokerLog* msg);
};

const ::xn_adp::tracking::BidRequest&
AdxBrokerLog::HasBitSetters::req(const AdxBrokerLog* msg) {
  return *msg->req_;
}
const ::xn_adp::tracking::BidResponse&
AdxBrokerLog::HasBitSetters::resp(const AdxBrokerLog* msg) {
  return *msg->resp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdxBrokerLog::kReqFieldNumber;
const int AdxBrokerLog::kRespFieldNumber;
const int AdxBrokerLog::kResultFieldNumber;
const int AdxBrokerLog::kDspFieldNumber;
const int AdxBrokerLog::kDspNbrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdxBrokerLog::AdxBrokerLog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xn_adp.tracking.AdxBrokerLog)
}
AdxBrokerLog::AdxBrokerLog(const AdxBrokerLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  dsp_nbr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.dsp_nbr().size() > 0) {
    dsp_nbr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dsp_nbr_);
  }
  if (from.has_req()) {
    req_ = new ::xn_adp::tracking::BidRequest(*from.req_);
  } else {
    req_ = nullptr;
  }
  if (from.has_resp()) {
    resp_ = new ::xn_adp::tracking::BidResponse(*from.resp_);
  } else {
    resp_ = nullptr;
  }
  dsp_ = from.dsp_;
  // @@protoc_insertion_point(copy_constructor:xn_adp.tracking.AdxBrokerLog)
}

void AdxBrokerLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdxBrokerLog_tracking_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsp_nbr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dsp_) -
      reinterpret_cast<char*>(&req_)) + sizeof(dsp_));
}

AdxBrokerLog::~AdxBrokerLog() {
  // @@protoc_insertion_point(destructor:xn_adp.tracking.AdxBrokerLog)
  SharedDtor();
}

void AdxBrokerLog::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsp_nbr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete resp_;
}

void AdxBrokerLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdxBrokerLog& AdxBrokerLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdxBrokerLog_tracking_2eproto.base);
  return *internal_default_instance();
}


void AdxBrokerLog::Clear() {
// @@protoc_insertion_point(message_clear_start:xn_adp.tracking.AdxBrokerLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dsp_nbr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resp_ != nullptr) {
    delete resp_;
  }
  resp_ = nullptr;
  dsp_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdxBrokerLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xn_adp.tracking.BidRequest req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xn_adp.tracking.BidResponse resp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_resp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "xn_adp.tracking.AdxBrokerLog.result");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dsp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dsp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dsp_nbr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dsp_nbr(), ptr, ctx, "xn_adp.tracking.AdxBrokerLog.dsp_nbr");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdxBrokerLog::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:xn_adp.tracking.AdxBrokerLog)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xn_adp.tracking.BidRequest req = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xn_adp.tracking.BidResponse resp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.AdxBrokerLog.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dsp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dsp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dsp_nbr = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dsp_nbr()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dsp_nbr().data(), static_cast<int>(this->dsp_nbr().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "xn_adp.tracking.AdxBrokerLog.dsp_nbr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xn_adp.tracking.AdxBrokerLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xn_adp.tracking.AdxBrokerLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdxBrokerLog::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xn_adp.tracking.AdxBrokerLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xn_adp.tracking.BidRequest req = 1;
  if (this->has_req()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::req(this), output);
  }

  // .xn_adp.tracking.BidResponse resp = 2;
  if (this->has_resp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::resp(this), output);
  }

  // string result = 3;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.AdxBrokerLog.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result(), output);
  }

  // int32 dsp = 4;
  if (this->dsp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->dsp(), output);
  }

  // string dsp_nbr = 5;
  if (this->dsp_nbr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dsp_nbr().data(), static_cast<int>(this->dsp_nbr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.AdxBrokerLog.dsp_nbr");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dsp_nbr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xn_adp.tracking.AdxBrokerLog)
}

::PROTOBUF_NAMESPACE_ID::uint8* AdxBrokerLog::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xn_adp.tracking.AdxBrokerLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xn_adp.tracking.BidRequest req = 1;
  if (this->has_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::req(this), target);
  }

  // .xn_adp.tracking.BidResponse resp = 2;
  if (this->has_resp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::resp(this), target);
  }

  // string result = 3;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.AdxBrokerLog.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->result(), target);
  }

  // int32 dsp = 4;
  if (this->dsp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->dsp(), target);
  }

  // string dsp_nbr = 5;
  if (this->dsp_nbr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dsp_nbr().data(), static_cast<int>(this->dsp_nbr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xn_adp.tracking.AdxBrokerLog.dsp_nbr");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->dsp_nbr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xn_adp.tracking.AdxBrokerLog)
  return target;
}

size_t AdxBrokerLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xn_adp.tracking.AdxBrokerLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string dsp_nbr = 5;
  if (this->dsp_nbr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dsp_nbr());
  }

  // .xn_adp.tracking.BidRequest req = 1;
  if (this->has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // .xn_adp.tracking.BidResponse resp = 2;
  if (this->has_resp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resp_);
  }

  // int32 dsp = 4;
  if (this->dsp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dsp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdxBrokerLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xn_adp.tracking.AdxBrokerLog)
  GOOGLE_DCHECK_NE(&from, this);
  const AdxBrokerLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdxBrokerLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xn_adp.tracking.AdxBrokerLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xn_adp.tracking.AdxBrokerLog)
    MergeFrom(*source);
  }
}

void AdxBrokerLog::MergeFrom(const AdxBrokerLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xn_adp.tracking.AdxBrokerLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.dsp_nbr().size() > 0) {

    dsp_nbr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dsp_nbr_);
  }
  if (from.has_req()) {
    mutable_req()->::xn_adp::tracking::BidRequest::MergeFrom(from.req());
  }
  if (from.has_resp()) {
    mutable_resp()->::xn_adp::tracking::BidResponse::MergeFrom(from.resp());
  }
  if (from.dsp() != 0) {
    set_dsp(from.dsp());
  }
}

void AdxBrokerLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xn_adp.tracking.AdxBrokerLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdxBrokerLog::CopyFrom(const AdxBrokerLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xn_adp.tracking.AdxBrokerLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdxBrokerLog::IsInitialized() const {
  return true;
}

void AdxBrokerLog::Swap(AdxBrokerLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdxBrokerLog::InternalSwap(AdxBrokerLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dsp_nbr_.Swap(&other->dsp_nbr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(req_, other->req_);
  swap(resp_, other->resp_);
  swap(dsp_, other->dsp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdxBrokerLog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tracking
}  // namespace xn_adp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::XNBidInfo* Arena::CreateMaybeMessage< ::xn_adp::tracking::XNBidInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::XNBidInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::ThirdBidInfo* Arena::CreateMaybeMessage< ::xn_adp::tracking::ThirdBidInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::ThirdBidInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::LocationInfo* Arena::CreateMaybeMessage< ::xn_adp::tracking::LocationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::LocationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::BidRequest* Arena::CreateMaybeMessage< ::xn_adp::tracking::BidRequest >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::BidRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::BidResponse* Arena::CreateMaybeMessage< ::xn_adp::tracking::BidResponse >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::BidResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::BidInfo* Arena::CreateMaybeMessage< ::xn_adp::tracking::BidInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::BidInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::TrackingLog* Arena::CreateMaybeMessage< ::xn_adp::tracking::TrackingLog >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::TrackingLog >(arena);
}
template<> PROTOBUF_NOINLINE ::xn_adp::tracking::AdxBrokerLog* Arena::CreateMaybeMessage< ::xn_adp::tracking::AdxBrokerLog >(Arena* arena) {
  return Arena::CreateInternal< ::xn_adp::tracking::AdxBrokerLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
