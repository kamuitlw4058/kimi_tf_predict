/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ModelPredictService_H
#define ModelPredictService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "model_predict_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ModelPredictServiceIf {
 public:
  virtual ~ModelPredictServiceIf() {}
  virtual void predictPb(std::string& _return, const std::string& model_key, const std::string& request_msg) = 0;
  virtual double predict(const std::map<std::string, std::string> & row) = 0;
  virtual void predictList(std::vector<double> & _return, const std::vector<std::map<std::string, std::string> > & rows) = 0;
  virtual void get_model_versions(std::map<std::string, std::string> & _return) = 0;
  virtual void update_model(const std::string& model_key, const std::string& model_dir_path) = 0;
};

class ModelPredictServiceIfFactory {
 public:
  typedef ModelPredictServiceIf Handler;

  virtual ~ModelPredictServiceIfFactory() {}

  virtual ModelPredictServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ModelPredictServiceIf* /* handler */) = 0;
};

class ModelPredictServiceIfSingletonFactory : virtual public ModelPredictServiceIfFactory {
 public:
  ModelPredictServiceIfSingletonFactory(const ::std::shared_ptr<ModelPredictServiceIf>& iface) : iface_(iface) {}
  virtual ~ModelPredictServiceIfSingletonFactory() {}

  virtual ModelPredictServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ModelPredictServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ModelPredictServiceIf> iface_;
};

class ModelPredictServiceNull : virtual public ModelPredictServiceIf {
 public:
  virtual ~ModelPredictServiceNull() {}
  void predictPb(std::string& /* _return */, const std::string& /* model_key */, const std::string& /* request_msg */) {
    return;
  }
  double predict(const std::map<std::string, std::string> & /* row */) {
    double _return = (double)0;
    return _return;
  }
  void predictList(std::vector<double> & /* _return */, const std::vector<std::map<std::string, std::string> > & /* rows */) {
    return;
  }
  void get_model_versions(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void update_model(const std::string& /* model_key */, const std::string& /* model_dir_path */) {
    return;
  }
};

typedef struct _ModelPredictService_predictPb_args__isset {
  _ModelPredictService_predictPb_args__isset() : model_key(false), request_msg(false) {}
  bool model_key :1;
  bool request_msg :1;
} _ModelPredictService_predictPb_args__isset;

class ModelPredictService_predictPb_args {
 public:

  ModelPredictService_predictPb_args(const ModelPredictService_predictPb_args&);
  ModelPredictService_predictPb_args& operator=(const ModelPredictService_predictPb_args&);
  ModelPredictService_predictPb_args() : model_key(), request_msg() {
  }

  virtual ~ModelPredictService_predictPb_args() noexcept;
  std::string model_key;
  std::string request_msg;

  _ModelPredictService_predictPb_args__isset __isset;

  void __set_model_key(const std::string& val);

  void __set_request_msg(const std::string& val);

  bool operator == (const ModelPredictService_predictPb_args & rhs) const
  {
    if (!(model_key == rhs.model_key))
      return false;
    if (!(request_msg == rhs.request_msg))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_predictPb_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_predictPb_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModelPredictService_predictPb_pargs {
 public:


  virtual ~ModelPredictService_predictPb_pargs() noexcept;
  const std::string* model_key;
  const std::string* request_msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_predictPb_result__isset {
  _ModelPredictService_predictPb_result__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_predictPb_result__isset;

class ModelPredictService_predictPb_result {
 public:

  ModelPredictService_predictPb_result(const ModelPredictService_predictPb_result&);
  ModelPredictService_predictPb_result& operator=(const ModelPredictService_predictPb_result&);
  ModelPredictService_predictPb_result() : success() {
  }

  virtual ~ModelPredictService_predictPb_result() noexcept;
  std::string success;

  _ModelPredictService_predictPb_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ModelPredictService_predictPb_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_predictPb_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_predictPb_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_predictPb_presult__isset {
  _ModelPredictService_predictPb_presult__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_predictPb_presult__isset;

class ModelPredictService_predictPb_presult {
 public:


  virtual ~ModelPredictService_predictPb_presult() noexcept;
  std::string* success;

  _ModelPredictService_predictPb_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ModelPredictService_predict_args__isset {
  _ModelPredictService_predict_args__isset() : row(false) {}
  bool row :1;
} _ModelPredictService_predict_args__isset;

class ModelPredictService_predict_args {
 public:

  ModelPredictService_predict_args(const ModelPredictService_predict_args&);
  ModelPredictService_predict_args& operator=(const ModelPredictService_predict_args&);
  ModelPredictService_predict_args() {
  }

  virtual ~ModelPredictService_predict_args() noexcept;
  std::map<std::string, std::string>  row;

  _ModelPredictService_predict_args__isset __isset;

  void __set_row(const std::map<std::string, std::string> & val);

  bool operator == (const ModelPredictService_predict_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_predict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_predict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModelPredictService_predict_pargs {
 public:


  virtual ~ModelPredictService_predict_pargs() noexcept;
  const std::map<std::string, std::string> * row;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_predict_result__isset {
  _ModelPredictService_predict_result__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_predict_result__isset;

class ModelPredictService_predict_result {
 public:

  ModelPredictService_predict_result(const ModelPredictService_predict_result&);
  ModelPredictService_predict_result& operator=(const ModelPredictService_predict_result&);
  ModelPredictService_predict_result() : success(0) {
  }

  virtual ~ModelPredictService_predict_result() noexcept;
  double success;

  _ModelPredictService_predict_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const ModelPredictService_predict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_predict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_predict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_predict_presult__isset {
  _ModelPredictService_predict_presult__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_predict_presult__isset;

class ModelPredictService_predict_presult {
 public:


  virtual ~ModelPredictService_predict_presult() noexcept;
  double* success;

  _ModelPredictService_predict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ModelPredictService_predictList_args__isset {
  _ModelPredictService_predictList_args__isset() : rows(false) {}
  bool rows :1;
} _ModelPredictService_predictList_args__isset;

class ModelPredictService_predictList_args {
 public:

  ModelPredictService_predictList_args(const ModelPredictService_predictList_args&);
  ModelPredictService_predictList_args& operator=(const ModelPredictService_predictList_args&);
  ModelPredictService_predictList_args() {
  }

  virtual ~ModelPredictService_predictList_args() noexcept;
  std::vector<std::map<std::string, std::string> >  rows;

  _ModelPredictService_predictList_args__isset __isset;

  void __set_rows(const std::vector<std::map<std::string, std::string> > & val);

  bool operator == (const ModelPredictService_predictList_args & rhs) const
  {
    if (!(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_predictList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_predictList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModelPredictService_predictList_pargs {
 public:


  virtual ~ModelPredictService_predictList_pargs() noexcept;
  const std::vector<std::map<std::string, std::string> > * rows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_predictList_result__isset {
  _ModelPredictService_predictList_result__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_predictList_result__isset;

class ModelPredictService_predictList_result {
 public:

  ModelPredictService_predictList_result(const ModelPredictService_predictList_result&);
  ModelPredictService_predictList_result& operator=(const ModelPredictService_predictList_result&);
  ModelPredictService_predictList_result() {
  }

  virtual ~ModelPredictService_predictList_result() noexcept;
  std::vector<double>  success;

  _ModelPredictService_predictList_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const ModelPredictService_predictList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_predictList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_predictList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_predictList_presult__isset {
  _ModelPredictService_predictList_presult__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_predictList_presult__isset;

class ModelPredictService_predictList_presult {
 public:


  virtual ~ModelPredictService_predictList_presult() noexcept;
  std::vector<double> * success;

  _ModelPredictService_predictList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ModelPredictService_get_model_versions_args {
 public:

  ModelPredictService_get_model_versions_args(const ModelPredictService_get_model_versions_args&);
  ModelPredictService_get_model_versions_args& operator=(const ModelPredictService_get_model_versions_args&);
  ModelPredictService_get_model_versions_args() {
  }

  virtual ~ModelPredictService_get_model_versions_args() noexcept;

  bool operator == (const ModelPredictService_get_model_versions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ModelPredictService_get_model_versions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_get_model_versions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModelPredictService_get_model_versions_pargs {
 public:


  virtual ~ModelPredictService_get_model_versions_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_get_model_versions_result__isset {
  _ModelPredictService_get_model_versions_result__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_get_model_versions_result__isset;

class ModelPredictService_get_model_versions_result {
 public:

  ModelPredictService_get_model_versions_result(const ModelPredictService_get_model_versions_result&);
  ModelPredictService_get_model_versions_result& operator=(const ModelPredictService_get_model_versions_result&);
  ModelPredictService_get_model_versions_result() {
  }

  virtual ~ModelPredictService_get_model_versions_result() noexcept;
  std::map<std::string, std::string>  success;

  _ModelPredictService_get_model_versions_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const ModelPredictService_get_model_versions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_get_model_versions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_get_model_versions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ModelPredictService_get_model_versions_presult__isset {
  _ModelPredictService_get_model_versions_presult__isset() : success(false) {}
  bool success :1;
} _ModelPredictService_get_model_versions_presult__isset;

class ModelPredictService_get_model_versions_presult {
 public:


  virtual ~ModelPredictService_get_model_versions_presult() noexcept;
  std::map<std::string, std::string> * success;

  _ModelPredictService_get_model_versions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ModelPredictService_update_model_args__isset {
  _ModelPredictService_update_model_args__isset() : model_key(false), model_dir_path(false) {}
  bool model_key :1;
  bool model_dir_path :1;
} _ModelPredictService_update_model_args__isset;

class ModelPredictService_update_model_args {
 public:

  ModelPredictService_update_model_args(const ModelPredictService_update_model_args&);
  ModelPredictService_update_model_args& operator=(const ModelPredictService_update_model_args&);
  ModelPredictService_update_model_args() : model_key(), model_dir_path() {
  }

  virtual ~ModelPredictService_update_model_args() noexcept;
  std::string model_key;
  std::string model_dir_path;

  _ModelPredictService_update_model_args__isset __isset;

  void __set_model_key(const std::string& val);

  void __set_model_dir_path(const std::string& val);

  bool operator == (const ModelPredictService_update_model_args & rhs) const
  {
    if (!(model_key == rhs.model_key))
      return false;
    if (!(model_dir_path == rhs.model_dir_path))
      return false;
    return true;
  }
  bool operator != (const ModelPredictService_update_model_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_update_model_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModelPredictService_update_model_pargs {
 public:


  virtual ~ModelPredictService_update_model_pargs() noexcept;
  const std::string* model_key;
  const std::string* model_dir_path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModelPredictService_update_model_result {
 public:

  ModelPredictService_update_model_result(const ModelPredictService_update_model_result&);
  ModelPredictService_update_model_result& operator=(const ModelPredictService_update_model_result&);
  ModelPredictService_update_model_result() {
  }

  virtual ~ModelPredictService_update_model_result() noexcept;

  bool operator == (const ModelPredictService_update_model_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ModelPredictService_update_model_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelPredictService_update_model_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ModelPredictService_update_model_presult {
 public:


  virtual ~ModelPredictService_update_model_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ModelPredictServiceClient : virtual public ModelPredictServiceIf {
 public:
  ModelPredictServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ModelPredictServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void predictPb(std::string& _return, const std::string& model_key, const std::string& request_msg);
  void send_predictPb(const std::string& model_key, const std::string& request_msg);
  void recv_predictPb(std::string& _return);
  double predict(const std::map<std::string, std::string> & row);
  void send_predict(const std::map<std::string, std::string> & row);
  double recv_predict();
  void predictList(std::vector<double> & _return, const std::vector<std::map<std::string, std::string> > & rows);
  void send_predictList(const std::vector<std::map<std::string, std::string> > & rows);
  void recv_predictList(std::vector<double> & _return);
  void get_model_versions(std::map<std::string, std::string> & _return);
  void send_get_model_versions();
  void recv_get_model_versions(std::map<std::string, std::string> & _return);
  void update_model(const std::string& model_key, const std::string& model_dir_path);
  void send_update_model(const std::string& model_key, const std::string& model_dir_path);
  void recv_update_model();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ModelPredictServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ModelPredictServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ModelPredictServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_predictPb(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_predict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_predictList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_model_versions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_model(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ModelPredictServiceProcessor(::std::shared_ptr<ModelPredictServiceIf> iface) :
    iface_(iface) {
    processMap_["predictPb"] = &ModelPredictServiceProcessor::process_predictPb;
    processMap_["predict"] = &ModelPredictServiceProcessor::process_predict;
    processMap_["predictList"] = &ModelPredictServiceProcessor::process_predictList;
    processMap_["get_model_versions"] = &ModelPredictServiceProcessor::process_get_model_versions;
    processMap_["update_model"] = &ModelPredictServiceProcessor::process_update_model;
  }

  virtual ~ModelPredictServiceProcessor() {}
};

class ModelPredictServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ModelPredictServiceProcessorFactory(const ::std::shared_ptr< ModelPredictServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ModelPredictServiceIfFactory > handlerFactory_;
};

class ModelPredictServiceMultiface : virtual public ModelPredictServiceIf {
 public:
  ModelPredictServiceMultiface(std::vector<std::shared_ptr<ModelPredictServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ModelPredictServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ModelPredictServiceIf> > ifaces_;
  ModelPredictServiceMultiface() {}
  void add(::std::shared_ptr<ModelPredictServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void predictPb(std::string& _return, const std::string& model_key, const std::string& request_msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predictPb(_return, model_key, request_msg);
    }
    ifaces_[i]->predictPb(_return, model_key, request_msg);
    return;
  }

  double predict(const std::map<std::string, std::string> & row) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predict(row);
    }
    return ifaces_[i]->predict(row);
  }

  void predictList(std::vector<double> & _return, const std::vector<std::map<std::string, std::string> > & rows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->predictList(_return, rows);
    }
    ifaces_[i]->predictList(_return, rows);
    return;
  }

  void get_model_versions(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_model_versions(_return);
    }
    ifaces_[i]->get_model_versions(_return);
    return;
  }

  void update_model(const std::string& model_key, const std::string& model_dir_path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_model(model_key, model_dir_path);
    }
    ifaces_[i]->update_model(model_key, model_dir_path);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ModelPredictServiceConcurrentClient : virtual public ModelPredictServiceIf {
 public:
  ModelPredictServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ModelPredictServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void predictPb(std::string& _return, const std::string& model_key, const std::string& request_msg);
  int32_t send_predictPb(const std::string& model_key, const std::string& request_msg);
  void recv_predictPb(std::string& _return, const int32_t seqid);
  double predict(const std::map<std::string, std::string> & row);
  int32_t send_predict(const std::map<std::string, std::string> & row);
  double recv_predict(const int32_t seqid);
  void predictList(std::vector<double> & _return, const std::vector<std::map<std::string, std::string> > & rows);
  int32_t send_predictList(const std::vector<std::map<std::string, std::string> > & rows);
  void recv_predictList(std::vector<double> & _return, const int32_t seqid);
  void get_model_versions(std::map<std::string, std::string> & _return);
  int32_t send_get_model_versions();
  void recv_get_model_versions(std::map<std::string, std::string> & _return, const int32_t seqid);
  void update_model(const std::string& model_key, const std::string& model_dir_path);
  int32_t send_update_model(const std::string& model_key, const std::string& model_dir_path);
  void recv_update_model(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
